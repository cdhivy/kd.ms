<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Stephan Meijer</title>
        <link>http://localhost:3000</link>
        <description>All of my long-form thoughts on programming, growth, world views and more, collected in chronological order.</description>
        <lastBuildDate>Sun, 28 May 2023 19:52:23 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Stephan Meijer</title>
            <url>http://localhost:3000/favicon.ico</url>
            <link>http://localhost:3000</link>
        </image>
        <copyright>All rights reserved 2023</copyright>
        <item>
            <title><![CDATA[No, react server components won't make your life simpler]]></title>
            <link>http://localhost:3000/articles/no-react-server-components-wont-make-your-life-simpler</link>
            <guid>http://localhost:3000/articles/no-react-server-components-wont-make-your-life-simpler</guid>
            <pubDate>Thu, 25 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Fullstack development, or rather isomorphic development, isn't as simple as they say.]]></description>
            <content:encoded><![CDATA[<p>Server doesn&#x27;t. Sure, your react components will look simpler, but your mental mode shouldn&#x27;t. There&#x27;s less context in the component, but more so in your head. Server and client, are not the same. Thinking they are, is just foolish.</p>
<p>Let&#x27;s make clear that this post isn&#x27;t a rant about server components. I have nothing against those, and I&#x27;m not against full stack development either. What I am against, is the false claim that moving parts of our code to the server, would make the job of a frontend developer easier.</p>
<p>I&#x27;ve decided to write down a few thoughts, in response to various claims that the recistance against server components is no different from the anti-JSX crowd years ago. I can tell you, this recent shift is nothing like that. It&#x27;s not even close to a change in syntax or the need to adapt your mental model. It&#x27;s also not just the fullstack aspect that makes it hard, it&#x27;s the isomorphic aspect.</p>
<h2>Isomorphic Development: Bridging the network</h2>
<p>Let&#x27;s clear out the first misconception. Frameworks like Next.js and Remix let you write server and client code neatly together, and you&#x27;ll spawn your environment with a single <code>npm run dev</code> command. That doesn&#x27;t mean that it&#x27;s one environment tho.</p>
<p>There&#x27;s still a server, and still a client/browser bundle. In Next the server is code generated by extracting methods like <code>getServerSideProps</code> or the new functions decorated with <code>&#x27;use server&#x27;</code> , and in Remix it&#x27;s functions like <code>loader</code> and <code>action</code> that run exclusively on the server. Client side code runs in the browser, but depending on your implementation it might also run on the server. Let that last one sink in for a moment. That&#x27;s what this writing is about.</p>
<p>The thing to understand is that the build tools separate your server and client logic, and run each in their own environment. Server code on the server, client code in the browser, and sometimes, but not always, client code on the server. That, is what makes it <em>not easier</em>.</p>
<p>With this paradime shift, we&#x27;re not asking frontend developers to render their code on the server, we&#x27;re asking them to write code that&#x27;s runs safely, performantly, in both environments.</p>
<h2>Debugging: Juggling Two Environments</h2>
<p>With code split between the frontend and backend, you&#x27;re suddenly managing two separate environments. It means watching two debuggers hitting breakpoints, each with its own context. Or for the console.loggers amongst us, you&#x27;ll now have log statements in two consoles.</p>
<p>Also remember that your component might render twice. Once in the context of the server, and once in the context of the client. Might, because Next.js took a different direction than Remix. In Remix, your component will render twice. Once on the server, and then on the client during hydration (bind js handlers to make interactive). Next.js chose the route of not supporting state / interactivity on server components, so no hydration/rerender is needed there.</p>
<h2>Security: Protecting Boundaries</h2>
<p>Fullstack developers must guard against data leaks and breaches. The server has access to senstive information that clients shouldn&#x27;t have. You&#x27;ll now have to think about how to get those properties safely to the client.</p>
<p>Did you once store a variable on the module scope (out of your react component) as a form of cache between renders? Move that component from &#x27;use client&#x27; to &#x27;use server&#x27; during a refactor, and you&#x27;ll leak information between users.</p>
<p>It might not be hard to fix, but it&#x27;s an easy bug to introduce when your build tool decides where to run the code. Something to keep in mind and be aware of. At any time.</p>
<h2>Performance: The Dual Nature</h2>
<p>Performance behaves differently on the client and server. On the client, speed matters and we avoid browser bottlenecks. To use our time efficient, we often work under the principle &quot;you don&#x27;t run the function a thousand times, so fast is fast enough&quot;. Well, move that function from the client to the server, and scalability takes center stage. Functions that once ran only a couple of times, now run a couple times on every user request.</p>
<p>And remember, Node.js is single threaded. All sync code that runs on the server, blocks other requests being made. In the browser you don&#x27;t notice a 10ms delay, on your server, it can cause requests to queue up.</p>
<h2>Data Querying: Bridging The Gap</h2>
<p>Querying data is a joint effort. Frontend make API calls, while backend tackles databases. Fullstack developers must master database performance, query optimizations, and indexing. Don&#x27;t forget about rate limitting challenges when server interacts with external APIs. Where the client would have made a handfull requests to an API from thousands of different origins, you&#x27;re now making thousands requests from a single origin.</p>
<p>When caching responses for the sake of performance, be aware of where your query runs, for the sake of security. Depending on the query, you might or might not want to share your caches across requests.</p>
<h2>Conclusion</h2>
<p>My concern isn&#x27;t about moving to fullstack development. I&#x27;ve been there for over 15 years. My concern is about the hybrid nature that we&#x27;re moving into. Code runs in both environments, and boundaries are there, but not clearly visible. It&#x27;s easy to slip up because we&#x27;re busy, or because we&#x27;re missing something during refactor.</p>
<p>Our tools aren&#x27;t ready for this. We don&#x27;t have an isomorphic debugger that hits breakpoints on both environments, and we don&#x27;t have an isomorphic console that merges log statements from client and server. Eslint is merely a linter for formatting, and TypeScript won&#x27;t warn you about leaking variables either.</p>
<p>And all of the above can be learned. But it&#x27;s so much more than &quot;just adapt your mental model&quot;. It&#x27;s new knowledge, and it&#x27;ll make your job harder. If you believe it doesn&#x27;t, then you&#x27;re either missing the risks, or you&#x27;re underselling yourselve.</p>
<p>Maybe it&#x27;s time to stop calling it fullstack development. It&#x27;s no longer enough to be proficient in both environments. We need to start thinking of it like a single environment, even tho our tools don&#x27;t expose it that way. How does isomorphic development sound?</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Simpler Dev Environments with Procfiles]]></title>
            <link>http://localhost:3000/articles/simpler-dev-environments-with-procfiles</link>
            <guid>http://localhost:3000/articles/simpler-dev-environments-with-procfiles</guid>
            <pubDate>Wed, 01 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Use Procfiles to turn multiple startup commands into a single one.]]></description>
            <content:encoded><![CDATA[<p>Throughout the time, I&#x27;ve tried a number of different ways to manage my development environment. From Make files, to <a href="https://meijer.ws/articles/simplify-your-dev-environment-with-pm2">PM2</a> and <a href="https://gist.github.com/smeijer/0e3604a51e9393d2ac009cef6ce0fb48">Tmux</a>.</p>
<p>Tmux, is well.., tmux. <a href="https://github.com/tmuxinator/tmuxinator">Tmuxinator</a> makes it manageable, but the &quot;layout&quot; definition is far from readable, and copying errors from history to your clipboard, is a true pain in the ass.</p>
<p>I still recommend taking a look at PM2 if you need more than &quot;get things running&quot;. It comes with a lot of options, but that also means that your config script comes with some verbosity.</p>
<p>This article explains how I cover my simple use cases. Those that don&#x27;t require additional file watchers (see PM2), or split panes to separate logs while sticking to a single terminal (see Tmux). For those, I use Procfiles.</p>
<h2>No fear, Procfile is here!</h2>
<p>Procfile? Yeah, the first time I heard it I was &quot;<em>not another make file, right?!</em>&quot;. And luckily, it&#x27;s nothing like that. Let&#x27;s get started.</p>
<p>So a Procfile is a simple <code>key: command</code> format. And much like a Dockerfile, it&#x27;s by convention named after the format. I recommend creating file named <code>Procfile</code> in the root of your project, and commit it to your repo. If not for yourself, than for every new contributor that one day joins your team.</p>
<p>For <a href="https://magicbell.com">MagicBell</a>, our procfile looks as follows:</p>
<pre><code>server: bin/rails s -p 3000 -e development
worker: bin/bundle exec sidekiq
webpack: bin/webpacker-dev-server
</code></pre>
<p>That&#x27;s it. That&#x27;s all the config you need to get multiple services up and running through a single command.</p>
<p>Obviously, we still need to install a runner to handle this procfile. Meet <a href="https://github.com/ddollar/foreman">foreman</a>, or one of it&#x27;s forks. Foreman is a Ruby script, so for that you&#x27;ll need to have Ruby installed. There are many forks though. Such as <a href="https://github.com/chrismytton/shoreman">shoreman</a>, which is a dependency free shell script, or <a href="https://github.com/strongloop/node-foreman">node-foreman</a>, which is a javascript fork. I go with node-foreman, for the simple reason that I&#x27;m a node guy and I like that I can <code>npm install</code> it to the dependencies of my node projects.</p>
<p>So, go ahead, and install <code>node-foreman</code>. For the sake of this howto, let&#x27;s go global. Drop the <code>-g</code> if you have a concrete project at hand.</p>
<pre><code>npm i -g node-foreman
</code></pre>
<p>Node-foreman installs a binary named <code>nf</code>. With this installed, it&#x27;s as simple as running <code>nf start</code> in the same directory as your <code>Procfile</code>. Try it, and see all your services spin up and log to the same terminal. When you have an <code>.env</code> file in the same directory, <code>node-foreman</code> automatically loads all environment variables from it. If your env file is named differently, say <code>.env.development</code>, you can specify it with the <code>--env</code> flag. Use the <code>--procfile</code> flag if you need to specify a Procfile.</p>
<h2>A bit more… tabs</h2>
<p>The above might be all you need. But sometimes, I like to have my startup process a bit personalised. For that, I use scripts that I store under my home directory.</p>
<p>For MagicBell, my config exists of two files. One custom procfile, saved as <code>~/scripts/magicbell.proc</code>:</p>
<pre><code>server: bin/rails s -p 3000 -e development
worker: bin/bundle exec sidekiq
webpack: bin/webpacker-dev-server
codegen: yarn codegen -w
</code></pre>
<p>And the &quot;executable&quot; script that I run, saved as <code>~/scripts/start-magicbell</code> (don&#x27;t forget to <code>chmod +x</code>)</p>
<pre><code>#!/usr/bin/env bash

cd ~/dev/magicbell/backend
ttab docker-compose up

bundle install
yarn install
yarn db:migrate
 
nf start -j ~/scripts/magicbell.proc -e .env.development
</code></pre>
<p>When read that script, you&#x27;ll notice <code>ttab</code>. <a href="https://www.npmjs.com/package/ttab">ttab</a> is a small utility that allows us to start commands in a new terminal tab. That way, I can start postgres &amp; redis in one terminal instance (tab) while running everything else in another. Ttab is optional, but I highly recommend using it for simplicity.</p>
<pre><code>npm i -g ttab
</code></pre>
<p>As I&#x27;ve added <code>~/scripts</code> to my <code>PATH</code>, I can get the MagicBell environment up and running using a single <code>start-magicbell</code> command. Let me walk you trough wat it does:</p>
<ul>
<li>first, it navigates to the git repo on my drive, at <code>~/dev/magicbell/backend</code></li>
<li>runs <code>docker-compose up</code> in a new tab, detached from the current</li>
<li>installs all ruby gems, while the db is spinning up</li>
<li>installs all node modules</li>
<li>runs our database migration script</li>
<li>starts the four services defined in the procfile</li>
</ul>
<p>With this single command, I&#x27;ve started 6 services and ran some install/migrate commands. It happened too often that I manually had to install new gems or modules after pulling changes. Those commands are fast enough to run as part of my startup, yet take enough time for the database to be online before the server starts.</p>
<p>That&#x27;s it. Both <a href="https://github.com/strongloop/node-foreman">node-foreman</a> and <a href="https://www.npmjs.com/package/ttab">ttab</a> come with a bunch of options. So be sure to check out their readmes (especially from node-foreman!)</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Conflicted]]></title>
            <link>http://localhost:3000/articles/conflicted</link>
            <guid>http://localhost:3000/articles/conflicted</guid>
            <pubDate>Mon, 28 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[A rambling about recent events in my life]]></description>
            <content:encoded><![CDATA[<p>A LOT has happened over the last few months. And yet, I haven&#x27;t written about any of it. I wanted to, but I&#x27;ve been unable to find the time, the words, or maybe mostly the right mood.</p>
<p>I wanted to write about <a href="https://twitter.com/meijer_s/status/1445117911681601544">my adventure with Kent C. Dodds</a>. We&#x27;ve created one of the first, if not the first, full-fletched website using Remix. It was lots of fun. Little did I know that the animations and transitions that I implemented for Kent <a href="https://twitter.com/unamashana/status/1446133575087132682">would lead</a> to my current position at MagicBell.</p>
<p>Together with the launch of his new website, my <a href="https://kentcdodds.com/chats/04/19/stephan-meijer-chats-about-side-projects">&quot;Chat with Kent&quot;</a> got published. Again, something worth writing about. I remember thinking back then that I should have said things differently. But I still haven&#x27;t listened to the recording.</p>
<p>The launch of his site lead to a chat with <a href="https://twitter.com/unamashana">Hana Mohan</a>. Not long after, I signed for a role as Founding Frontend Developer at <a href="https://www.magicbell.com">MagicBell</a>, and ended my partnership at a firm that I co-founded but got never recognized for. I&#x27;ve sold my 10% and moved on.</p>
<p>As the cherry on the pie, we had <a href="https://twitter.com/unamashana/status/1491346977476743170">a company retreat</a> in Miami. It was a fantastic way to get to know my new coworkers. I&#x27;m truly grateful for that experience. That trip alone is worth writing for.</p>
<p>Since I started working for MagicBell, I&#x27;ve added several features to the product, the dashboard, the SDKs, and launched <a href="https://twitter.com/meijer_s/status/1499754505323302916">MagicBell Playground</a>. A little side project under business hours.</p>
<p>But then the conflicted part.</p>
<p>While working on Kent&#x27;s new website, my step-dad got diagnosed with cancer. He is unlikely to make the end of this year. Doctors have given him months, and he&#x27;s running out of time.</p>
<p>While I quit my partnership and transitioned to my new position at MagicBell, my wife booked a last-minute flight &quot;home,&quot; as her grandma was hospitalised with Covid, and doctors gave her a 50/50 chance of survival. Luckily she did.</p>
<p>Only to be abruptly awakened by incoming Russian artillery on February 24th. Two days after my 35th birthday. While I launched the playground, grandma hid in the bathtub. She&#x27;s here now. Safe with us. But it took us two weeks to get her out of the country.</p>
<p>We managed to extract six more friends. Or, well, one friend with her two kids and their grandma and one aunt with her grandson. Other friends fled on time or are still stuck in this dirty war. Some because they don&#x27;t want to leave their home. Others because they simply can&#x27;t.</p>
<p>As I&#x27;m writing this, grandma is crying again. She received a photo of her apartment earlier today, and it doesn&#x27;t look nice.</p>
<p>The last few months have been an emotional rollercoaster. My professional life has been nothing less than amazing. Sure, there are some <a href="https://twitter.com/meijer_s/status/1504483086288908295">frustrations</a>, but that&#x27;s nothing. On a personal level, I do my best to be happy and positive for the kids, while I&#x27;m heartbroken for the lives of our friends.</p>
<p>In a few days from now, my kid turns 2. He&#x27;ll get his first bike, and we&#x27;ll eat pie. And then again, one of the guests will be our friend with her kids, who lost their home, miss their dad, and wear our kids&#x27; clothes.</p>
<p>I&#x27;m grateful. I&#x27;m happy. I&#x27;m terrified. I wish I could do more.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Typed GraphQL with react-query & graphql-request]]></title>
            <link>http://localhost:3000/articles/typed-graphql-with-react-query-graphql-request</link>
            <guid>http://localhost:3000/articles/typed-graphql-with-react-query-graphql-request</guid>
            <pubDate>Thu, 25 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Using typed GraphQL queries to easy development and maintain API confidence]]></description>
            <content:encoded><![CDATA[<p>While our front-end at <a href="https://magicbell.io/">MagicBell</a> is a React/TypeScript application, we write our back-end in Ruby. This article explains how I&#x27;ve connected our client to the back-end and how we guard against breaking API changes.</p>
<h3>GraphQL Code Generator</h3>
<p>Let&#x27;s get the obvious choice out of the way first. <a href="https://www.graphql-code-generator.com/"><code>graphql-codegen</code></a>. It&#x27;s a no-brainer. This tool enables us to generate TypeScript types based on a GraphQL schema. Think typed queries, mutations, fragments, and object types.</p>
<p>Having types generated based upon your GraphQL schema means that TypeScript will inform you when the back-end (GraphQL API) introduces a breaking change. As a front-end engineer, that&#x27;s what I want!</p>
<p>GraphQL Code Generator can generate fully typed React hooks if you tell it to, but I&#x27;m a fan of keeping things simple and thereby of their <a href="https://the-guild.dev/blog/typed-document-node">TypedDocumentNode approach</a>. This variant is unaware of the GraphQL client that you&#x27;re using. In other words, it&#x27;s not tied to <code>react-apollo</code> (or alternative).</p>
<p>To get that up and running, you&#x27;ll need to install a few dev dependencies:</p>
<pre><code>npm i -D 
  @graphql-codegen/cli 
  @graphql-codegen/typed-document-node
  @graphql-codegen/typescript 
  @graphql-codegen/typescript-operations 
  @graphql-typed-document-node/core
</code></pre>
<p>And now the more exciting part, our codegen config (<code>codegen.yml</code>). We don&#x27;t have a schema stored in code, and because the back-end is in Ruby, <code>graphql-codegen</code> won&#x27;t be able to extract the types out of the back-end source files either. So instead, we provide our GraphQL endpoint. It&#x27;s an easy setup, but the one downside is that our server must be running when we want to generate new types.</p>
<pre class="language-yml"><code class="language-yml"><span class="token key atrule">schema</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">http://localhost:3000/graphql</span><span class="token punctuation">:</span>
      <span class="token key atrule">headers</span><span class="token punctuation">:</span>
        <span class="token key atrule">X-MAGICBELL-API-KEY</span><span class="token punctuation">:</span> <span class="token string">&quot;${MAGICBELL_API_KEY}&quot;</span>
<span class="token key atrule">documents</span><span class="token punctuation">:</span> <span class="token string">&quot;./app/javascript/src/graphql/**/*.graphql&quot;</span>
<span class="token key atrule">generates</span><span class="token punctuation">:</span>
  <span class="token key atrule">./app/javascript/src/graphql/generated.ts</span><span class="token punctuation">:</span>
    <span class="token key atrule">plugins</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> typescript
      <span class="token punctuation">-</span> typescript<span class="token punctuation">-</span>operations
      <span class="token punctuation">-</span> typed<span class="token punctuation">-</span>document<span class="token punctuation">-</span>node
</code></pre>
<p>That&#x27;s it. Codegen will read the <code>.env</code> file from the project root and use that to populate the API headers. <code>documents</code> is the path where the GraphQL queries are stored. I&#x27;ll come back to those later.</p>
<h3>Graphql Client</h3>
<p>I&#x27;m not going with the famous <code>@apollo/client</code> because it&#x27;s too much for our dashboard. Besides, we&#x27;re migrating from REST to GraphQL, meaning we&#x27;ll need to deal with both for some time. As <a href="https://react-query.tanstack.com/">React Query</a> is sublime in cache management, and can be used for both REST and GraphQL, we&#x27;ll be using that.</p>
<p>I have considered <a href="https://github.com/vercel/swr"><code>swr</code></a> instead of <code>react-query</code>, as it&#x27;s smaller, but they lack some fundamentals that we need. Think clear state indicators or even a (solid) solution to manage mutations.</p>
<p>For the fetching part, we&#x27;ll use <a href="https://github.com/prisma-labs/graphql-request"><code>graphql-request</code></a>. It has almost as many installs/month as apollo, but it&#x27;s <a href="https://bundlephobia.com/package/graphql-request@3.6.1">way smaller</a> and doesn&#x27;t have as many open issues.</p>
<h4>TypedDocumentNode and graphql-request</h4>
<p>Now the &quot;tricky&quot; part, we need <code>graphql-request</code> to use our generated <code>TypedDocumentNode</code>. For that, I&#x27;ve created a custom hook:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useCallback <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;react&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> request <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;graphql-request&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">RequestDocument</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;graphql-request/dist/types&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">TypedDocumentNode</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@graphql-typed-document-node/core&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useCurrentUser <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;../context&#x27;</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">useGraphqlRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> apiKey <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token maybe-class-name">TDocument</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token maybe-class-name">TVariables</span> <span class="token operator">=</span> <span class="token maybe-class-name">Record</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>
      <span class="token dom variable">document</span><span class="token operator">:</span> <span class="token maybe-class-name">RequestDocument</span> <span class="token operator">|</span> <span class="token maybe-class-name">TypedDocumentNode</span><span class="token operator">&lt;</span><span class="token maybe-class-name">TDocument</span><span class="token punctuation">,</span> <span class="token maybe-class-name">TVariables</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
      variables<span class="token operator">?</span><span class="token operator">:</span> <span class="token maybe-class-name">TVariables</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span>
      <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token maybe-class-name">TDocument</span><span class="token punctuation">,</span> <span class="token maybe-class-name">TVariables</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#x27;/graphql&#x27;</span><span class="token punctuation">,</span> <span class="token dom variable">document</span><span class="token punctuation">,</span> variables<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#x27;X-MAGICBELL-API-KEY&#x27;</span><span class="token operator">:</span> apiKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>apiKey<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>That&#x27;s the magic sauce that will power it all. It returns a <code>graphql-request</code> client and uses <code>TypedDocumentNode</code> to infer types from the query. It also provides some defaults to <code>graphql-request</code>. Even without the type annotations, this would be a helpful hook that prevents setting options (like the header) in multiple places throughout our code.</p>
<h4>Writing queries</h4>
<p>And with this setup, we have a way to query the back-end with confidence. To create a new query, I&#x27;ll write a GraphQL definition in a <code>*.graphql</code> file somewhere in the path declared by <code>codegen.yml#documents</code>.</p>
<p>For example, this <a href="https://www.magicbell.com/docs/graphql-api/reference#logs-query">logs query</a>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="token keyword">query</span> <span class="token definition-query function">logMessage</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">:</span> <span class="token scalar">ID</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token property-query">log</span><span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token property">id</span>
    <span class="token property">createdAt</span>
    <span class="token object">user</span> <span class="token punctuation">{</span>
      <span class="token property">firstName</span>
      <span class="token property">lastName</span>
      <span class="token property">email</span>
    <span class="token punctuation">}</span>
    <span class="token object">notification</span> <span class="token punctuation">{</span>
      <span class="token property">title</span>
      <span class="token property">content</span>
      <span class="token property">actionUrl</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Then run <code>npx graphql-codegen</code>, and consume the generated types in my query hook that I compose using <code>react-query</code>:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;react-query&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useGraphqlRequest <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;./useGraphqlRequest&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">LogMessageDocument</span><span class="token punctuation">,</span> <span class="token maybe-class-name">LogMessageQuery</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;./generated&#x27;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">UseLogMessageOptions</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  logId<span class="token operator">?</span><span class="token operator">:</span> <span class="token maybe-class-name">LogMessageQuery</span><span class="token punctuation">[</span><span class="token string">&#x27;log&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#x27;id&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">useLogMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> logId <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">UseLogMessageOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">useGraphqlRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token generic-function"><span class="token function">useQuery</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token maybe-class-name">LogMessageQuery</span><span class="token punctuation">[</span><span class="token string">&#x27;log&#x27;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token string">&#x27;log-message&#x27;</span><span class="token punctuation">,</span> logId<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token maybe-class-name">LogMessageDocument</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> logId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> enabled<span class="token operator">:</span> logId <span class="token operator">!=</span> <span class="token keyword null nil">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Lastly, we&#x27;ll consume that hook in our component, to fetch the data that we need:</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">LogDetails</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> logId <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">LogDetailsProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> status <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLogMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> logId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>And that&#x27;s it. <code>data</code> is fully typed. Suppose the back-end engineers introduce a change that isn&#x27;t compatible with the current front-end, or I&#x27;m consuming data that never existed in the first place. In that case, TypeScript will notify us by throwing errors as part of the checks that run against our pull requests.</p>
<h2>Recap</h2>
<p>We type our GraphQL queries using <code>graphql-codegen</code> and use <code>react-query</code> to manage server/query state. <code>graphql-request</code> is the glue between codegen and react-query, a typed <code>fetch</code> for GraphQL, if you want. And with this setup, I have reduced the chance of breaking our GraphQL queries at <a href="https://magicbell.io/">MagicBell</a>.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Handling POST requests in Next.js getServerSideProps]]></title>
            <link>http://localhost:3000/articles/handling-post-requests-in-next-js-getserversideprops</link>
            <guid>http://localhost:3000/articles/handling-post-requests-in-next-js-getserversideprops</guid>
            <pubDate>Fri, 10 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[How to handle POST requests in Next.js getServerSideProps]]></description>
            <content:encoded><![CDATA[<p>The documentation pages of Next.js list <a href="https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"><code>getServerSideProps</code></a> under &quot;data fetching&quot;, and for any kind of data mutations, they&#x27;ll point you to the <a href="https://nextjs.org/docs/api-routes/introduction"><code>api routes</code></a>. I&#x27;m here to tell you, that there is another way!</p>
<p>In this article, I&#x27;m going to show you how you can post to <code>getServerSideProps</code>, and have your components, data fetching, and data mutation logic all collocated in the same file.</p>
<h2>HTML Forms</h2>
<p>I&#x27;ll directly dive in. We&#x27;ll create a form so we can bring this to a working example. Let&#x27;s keep it simple. Create a new next app with <code>npx create-next-app</code>, and add a form to your index component.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">IndexPage</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">&quot;person&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Note that I don&#x27;t set the &quot;action&quot; attribute. When the action attribute is left out, it defaults to the current path. And that&#x27;s exactly what we want it to do. If you&#x27;d be using an hosted form service like <a href="https://rake.red">rake.red</a>, you&#x27;d be setting it to an absolute url.</p>
<p>As we&#x27;ll be adding <code>getServerSideProps</code> in the next step, I&#x27;ve also already provided an initial <code>name</code> value via the props, and default it to <code>person</code> for now.</p>
<p>That&#x27;s it for the component part. This will render a form that accepts a name, and will be submitted to the current path. Give it a spin!</p>
<h2>Server Side Props</h2>
<p>So let&#x27;s start with the basic variant of <code>getServerSideProps</code>.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> req <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">method</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;smeijer&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>I&#x27;ve added an initial value for <code>name</code>, which you&#x27;ll now see rendered in your form. The value no longer comes from the component, but it&#x27;s consumed from an &quot;backend part&quot;. See it as a query if you will, but without additional request, and without a need for react-query, swr, or other forms of client state management.</p>
<p>Now, if you refresh the page, and resubmit the form, you&#x27;ll notice that the server will log <code>GET</code> on refresh, and <code>POST</code> on form submit. That&#x27;s right! We don&#x27;t need anything special to receive the post. Next already does that out of the box.</p>
<p>But here&#x27;s the thing. You can add logging statements for <code>req.body</code>, <code>req.params</code> and <code>req.query</code>, but they&#x27;re all empty. Next.js does not process our request body. So that&#x27;s something we&#x27;re gonna fix.</p>
<h2>Hooking up body-parser</h2>
<p>We&#x27;ll be using <a href="https://www.npmjs.com/package/body-parser"><code>body-parser</code></a> to read the request body. Install the dependency, and add the following 3 lines to the top of your file:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports">bodyParser</span> <span class="token keyword module">from</span> <span class="token string">&quot;body-parser&quot;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">util</span> <span class="token keyword module">from</span> <span class="token string">&quot;util&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> getBody <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token method function property-access">promisify</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token method function property-access">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><code>urlencoded()</code> returns an middleware function that has the common 3 arguments, <code>request</code>, <code>response</code> and <code>next</code>. We use <code>promisify</code> to turn the callback function into an async function, because we won&#x27;t be using this as a traditional middleware.</p>
<p>If you&#x27;ll now update <code>getServerSideProps</code> and add <code>await getBody(req, res)</code> to just before that log statement, you&#x27;ll see that our request body has been processed. 🤯</p>
<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> req<span class="token punctuation">,</span> res <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">await</span> <span class="token function">getBody</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">method</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// POST { name: &#x27;smeijer&#x27; }</span>
  <span class="token comment">// …</span>
</code></pre>
<p>And now you&#x27;re able to use <code>getServerSideProps</code> to handle your mutations. Seriously, do with the data in <code>req.body</code>, whatever you like. You can access secrets from <code>process.env</code>, and connect to the database in <code>getServerSideProps</code> just fine. It only runs on the server, and won&#x27;t be exposed to the client.</p>
<h2>Full Example</h2>
<p>Here is the full, runnable, Next.js page file. You&#x27;ll notice that I&#x27;ve wrapped the body parser statement inside a check against the request method. That&#x27;s technically not required, but let&#x27;s just add the body parsing in there so it doesn&#x27;t do unnecessary work during GET requests. Besides, we&#x27;re likely to add more logic in the POST handler, like writing stuff to our database.</p>
<p>Depending on your needs, you can return completely different props, or a similar shape. To keep things predictable, I definitely recommend the latter.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports">bodyParser</span> <span class="token keyword module">from</span> <span class="token string">&quot;body-parser&quot;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> promisify <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&quot;util&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> getBody <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token method function property-access">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> req<span class="token punctuation">,</span> res <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">method</span> <span class="token operator">===</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">await</span> <span class="token function">getBody</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> req<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token operator">?.</span>name <span class="token operator">||</span> <span class="token string">&quot;smeijer&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> req<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">?</span> <span class="token string">&quot;received!&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">IndexPage</span></span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Final word</h2>
<p>Even though Next.js doesn&#x27;t advertise the <code>getServerSideProps</code> handler in this way, I think it can be very useful as a simple way to add forms to your page, without the need to define api routes, and deal with client state.</p>
<p>I also haven&#x27;t tried if this works when hosting on vercel, as I&#x27;m running my Next.js apps on my own VPS instead of &quot;serverless&quot;. So if anyone can give that a shot, and let us know if it worked out, that would be great.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Typescript Type Assertions]]></title>
            <link>http://localhost:3000/articles/typescript-type-assertions</link>
            <guid>http://localhost:3000/articles/typescript-type-assertions</guid>
            <pubDate>Tue, 07 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[How to use Type Assertions to narrow types in TypeScript.]]></description>
            <content:encoded><![CDATA[<p>Type assertions look a lot like of <a href="https://meijer.ws/articles/typescript-type-guards-and-type-predicates">type guards</a>, with the exception that they don&#x27;t need to be embedded in an <code>if</code> statement.</p>
<p>Imagine we have a blog, and allow authenticated users to post comments. We come up with a function like this:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">isAuthenticated</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token maybe-class-name">User</span> <span class="token operator">|</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> user <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">addComment</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token maybe-class-name">User</span> <span class="token operator">|</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> comment<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">Error</span></span><span class="token punctuation">(</span><span class="token string">&#x27;unauthenticated&#x27;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  db<span class="token punctuation">.</span><span class="token property-access">comments</span><span class="token punctuation">.</span><span class="token method function property-access">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> author<span class="token operator">:</span> user<span class="token punctuation">.</span><span class="token property-access">_id</span><span class="token punctuation">,</span> comment <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>We have extracted an <code>isAuthenticated</code> helper that tells us if the user is logged in. And we make sure to throw an error if they are not.</p>
<p>In pure JavaScript, we would be done by now. An error will be thrown if <code>user</code> is <code>null</code>, so by the time we reach the database statement,  we&#x27;re sure that the <code>user</code> object is defined.</p>
<p>TypeScript on the other hand, still sees the <code>user</code> as <code>User | null</code>. To fix that, we can introduce a type guard. Update the helper by adding the type predicate <code>user is User</code> , and it understands that user is <code>null</code> in the scope of the <code>if</code> statement,  and thereby has to be <code>User</code> after it.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">isAuthenticated</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token maybe-class-name">User</span> <span class="token operator">|</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token operator">:</span> user <span class="token keyword">is</span> <span class="token maybe-class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> user <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>I recommend reading my earlier article about <a href="https://meijer.ws/articles/typescript-type-guards-and-type-predicates">Type guards and Type predicates</a> if you&#x27;re unfamiliar with those.</p>
<p>By adding the type predicate we&#x27;ve fixed the issue in the database statement. TypeScript is aware that <code>user</code> will never be <code>null</code> at that stage.</p>
<h2>Assertion Functions</h2>
<p>The problem lies in repetition. Having those 3 lines of code all around the project, adds noise. Besides, it&#x27;s unlikely that this is the only check you have defined.</p>
<p>We could turn that check into something like:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">assertAuthenticated</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token maybe-class-name">User</span> <span class="token operator">|</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token operator">:</span> user <span class="token keyword">is</span> <span class="token maybe-class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>user <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> user <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">Error</span></span><span class="token punctuation">(</span><span class="token string">&#x27;unauthenticated&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">addComment</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token maybe-class-name">User</span> <span class="token operator">|</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> comment<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assertAuthenticated</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

  db<span class="token punctuation">.</span><span class="token property-access">comments</span><span class="token punctuation">.</span><span class="token method function property-access">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> author<span class="token operator">:</span> user<span class="token punctuation">.</span><span class="token property-access">_id</span><span class="token punctuation">,</span> comment <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In plain JavaScript, that would still work.  The <code>assertAuthenticated</code> function throws if the <code>user</code> object is not defined, and because the error propagates, we never reach the database statement.</p>
<p>However, because we removed the wrapping <code>if</code> statement, TypeScript is again not happy. The <code>user._id</code> in the database statement, will throw an <code>TS2531: Object is possibly &#x27;null&#x27;</code>. To fix that, we&#x27;ll insert the <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions"><code>Type assertion</code></a>.</p>
<p>It&#x27;s quite trivial, really. Simply add <code>asserts</code> in front of the type predicate, and remove the return statement from the assertion function. Where type guards must return a <code>boolean</code>, assertion functions must return <code>void</code>.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">assertAuthenticated</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token maybe-class-name">User</span> <span class="token operator">|</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">asserts</span> user <span class="token keyword">is</span> <span class="token maybe-class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>user <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> user <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">Error</span></span><span class="token punctuation">(</span><span class="token string">&#x27;unauthenticated&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And now when you call this function, TypeScript knows that the value of <code>user</code> can never be <code>null</code> after that line.</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">addComment</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token maybe-class-name">User</span> <span class="token operator">|</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> comment<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assertAuthenticated</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
  db<span class="token punctuation">.</span><span class="token property-access">comments</span><span class="token punctuation">.</span><span class="token method function property-access">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> author<span class="token operator">:</span> user<span class="token punctuation">.</span><span class="token property-access">_id</span><span class="token punctuation">,</span> comment <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Assert Generic</h2>
<p>Now that we know about <code>asserts</code>, we can also quite easily introduce a reusable helper function:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">assert</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  condition<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
  message<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">asserts</span> condition <span class="token keyword">is</span> <span class="token maybe-class-name">Exclude</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span> <span class="token operator">|</span> <span class="token keyword nil">undefined</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>condition <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> condition <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">Error</span></span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And then whenever you have a function that accepts optional or partial values, you can simply protect them using a this <code>assert</code> helper.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">latestBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> blog <span class="token operator">=</span> <span class="token keyword control-flow">await</span> db<span class="token punctuation">.</span><span class="token property-access">blogs</span><span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> author<span class="token operator">:</span> <span class="token string">&#x27;smeijer&#x27;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Blog | null</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>blog<span class="token punctuation">,</span> <span class="token string">&#x27;author does  not have any blogs&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token comment">// and here we know `blog: Blog`</span>
<span class="token punctuation">}</span>
</code></pre>
<p>When the <code>blog</code> is not found in the database, the <code>assert</code> statement will throw an error up the chain, if it did find something, we can safely work with the object after the assert call.</p>
<p>The next time you consider type casting a property with <code>as MyType</code>, consider writing an type assertion instead. Instead of simply silencing TypeScript, you&#x27;ll get runtime validation with a single line of code.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Trivia or Job Interview?]]></title>
            <link>http://localhost:3000/articles/trivia-or-job-interview</link>
            <guid>http://localhost:3000/articles/trivia-or-job-interview</guid>
            <pubDate>Tue, 04 May 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[The interview process is broken, I can build, I can't play.]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve built multiple SaaS, and some are used by multinationals. Yet, I fail miserably at tricky interview questions. In this article, I&#x27;m going to show you a few recent questions I got, and share my thoughts.</p>
<p>In case you haven&#x27;t seen any of my work. In the last 12 months, I&#x27;ve launched <a href="https://testing-playground.com">testing-playground.com</a>, <a href="https://updrafts.app">updrafts.app</a>, <a href="https://rake.red">rake.red</a> and a bunch of <a href="https://meijer.ws/open-source">open source projects</a>. I like to believe that I know what I&#x27;m talking about.</p>
<h2>Question 1</h2>
<blockquote>
<p><em>Here is a simple design of a navbar menu, we are struggling to stick the <code>login</code> button to the right edge of the <code>&lt;nav&gt;</code> (borders are added for a better understanding).</em></p>
</blockquote>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/felxzv89t6jhfx4m498x.png" alt="image"/></p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Products<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Log in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">nav</span> <span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span> flex <span class="token punctuation">}</span>
  <span class="token selector">a</span> <span class="token punctuation">{</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0.4</span><span class="token unit">rem</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0.4</span><span class="token unit">rem</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre>
<p><strong>Options - Single Choice</strong></p>
<ul>
<li><code>a:last-of-type { margin-left: auto; }</code></li>
<li><code>a:last-of-type { margin-left: 100%; }</code></li>
<li><code>a:last-of-type { float: right; }</code></li>
<li><code>a:last-child { margin-left: auto; }</code></li>
<li><code>nav:last-child { float: right; }</code></li>
</ul>
<h3>My thoughts</h3>
<p>The interview existed of 12 questions, that had to be answered within 16 minutes. That sounds doable, until you meet the trick questions.</p>
<p>Have you thought about the question? I think that <code>a:last-child { margin-left: auto; }</code> is the correct answer. But <code>a:last-of-type { margin-left: auto; }</code> works as well. As this is an automated interview, I can only hope that I choose whatever the interviewer prefers. As <code>a:last-of-type</code> is listed first, this is easy to get tricked by. Time is limited, so when the candidate is confident that an option works, they are going to choose that, and move on to the next question.</p>
<p>I usually tend to group the left and right options, and add a <code>justify-content: space-between</code>. Why is that not an option? Is that wrong? Can we talk about it?</p>
<h2>Question 2</h2>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">raiseError</span> <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">MyError</span></span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">throw</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>What is the return type of this function in TypeScript?</p>
<p><strong>Options - Single Choice</strong></p>
<ul>
<li>
<p><code>MyError</code></p>
</li>
<li>
<p><code>void</code></p>
</li>
<li>
<p><code>null</code></p>
</li>
<li>
<p><code>undefined</code></p>
</li>
<li>
<p><code>never</code></p>
</li>
</ul>
<h3>My thoughts</h3>
<p>The clock was ticking, and I chose <code>void</code>. As that&#x27;s how I would annotate this function. Makes sense, right? Think again! The return type of this function isn&#x27;t <code>void</code>, it&#x27;s <code>never</code>. As it&#x27;s impossible for this function to return.</p>
<p>To make it return <code>void</code>, the throwing should be conditional. (wrapped with an <code>if</code>)</p>
<p>I believe this question is wrong because it doesn&#x27;t say much about your TypeScript experience. I mean, how many dedicated throw functions do you have in your codebase? Most functions are constructed in a way that they have a return path. Either with a value, undefined, or void.</p>
<p>And when you do come across this edge case in your day job, how hard would it be to place your cursor at the function, and wait for that pretty tool-tip to appear, telling you the exact return type?</p>
<h2>Question 3</h2>
<p>Which HTTP methods are idempotent?</p>
<p><strong>Options - Multiple Choice</strong></p>
<ul>
<li>All of them are idempotent as it is a stateless protocol</li>
<li>None of the HTTP methods are idempotent.</li>
<li>All of them except for POST, CONNECT and sometimes PATCH.</li>
<li>All of them except for POST, OPTIONS and TRACE.</li>
</ul>
<h3>My thoughts</h3>
<p>First of all, this was a test for a <code>frontend developer</code> position. Are frontend developers really expected to know if certain HTTP methods are idempotent or not? Isn&#x27;t that for the API developers to know? I really did not know the answer to this question.</p>
<p>After the test, I found out that the HTTP spec does have this specified, while I assumed that it was for the API spec (like <code>open-api</code>) to decide.</p>
<p>Anyways, I guessed that <code>all of them</code> are idempotent, as HTTP doesn&#x27;t hold state. My database does. But according to <a href="https://developer.mozilla.org/en-US/docs/Glossary/Idempotent#technical_knowledge">MDN</a>, it should have been <code>all of them except for POST, OPTIONS, and TRACE</code>. Today I learned.</p>
<p>Now the question is, what if I make my <code>POST</code> handler <code>idempotent</code>? Doesn&#x27;t this question depend a tiny bit on the API that we&#x27;re talking about?</p>
<h2>Question 4</h2>
<p>Which of the following browser actions/events are triggered by changing the CSS property <code>opacity</code>?</p>
<p><strong>Options - Multiple Choice</strong></p>
<ul>
<li>Layout operations performed</li>
<li>Painting/Rasterizing</li>
<li>Page composited together</li>
<li>None of the above</li>
</ul>
<h3>My thoughts</h3>
<p>Seriously? For what would we need this? I guess that the browser does a <code>repaint</code>, so that excludes the last option. <code>Opacity</code> doesn&#x27;t change the layout, so there wouldn&#x27;t be any <code>layout operations</code>. But what about <code>Page composited together</code>? I don&#x27;t know. I really don&#x27;t. Does that make me a bad developer?</p>
<p>Let&#x27;s move on. Do you still want that opacity on your navbar?</p>
<h2>Trick Questions</h2>
<p>There were six more weird technical questions that made more or less sense than the four above. But they all had one thing in common. It felt like they were trying to trick me, and it are questions that I don&#x27;t need to know to be able to develop solid applications.</p>
<p>When I would need to know it, I&#x27;m able to open my browser, and find the right answer in a matter of minutes. I&#x27;m a developer, but I suck at trivia.</p>
<p>Two more questions to wrap this up? Remember... your time is ticking:</p>
<p><strong>Question 11</strong></p>
<p>How would you explain a complicated technical problem to a colleague having none to very little technical understanding?</p>
<blockquote>
<p><em>Write answer here...</em></p>
</blockquote>
<p><strong>Question 12</strong></p>
<p>How would you go about getting a buy-in for your project from multiple stakeholders at work?</p>
<blockquote>
<p><em>Write answer here...</em></p>
</blockquote>
<p>I don&#x27;t know what you want me to say. Do you have more details? Can I get another coffee and 30 minutes of your time? Let&#x27;s talk about it.</p>
<h2>My score</h2>
<p>The &quot;nice&quot; thing about this automated test, is that you&#x27;ll get your score right away. I had a total score of 47%. I suck at React, HTTP, Communication, well, basically in every area.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekbriyjxvp2lyoutk8vr.png" alt="image"/></p>
<p>As expected, a few hours after my submission, I got the following mail. A little surprised that that part wasn&#x27;t automated as well.</p>
<blockquote>
<p>Hi Stephan,</p>
<p>Thanks for doing the skills test! It was a tough decision as we&#x27;ve had so many great applications, but we&#x27;ve decided to move forward with other candidates. <strong>Really looking for folks who&#x27;ve got more experience with javascript.</strong></p>
</blockquote>
<p>Well, this really was a motivational experience <em>(not)</em>. Do you know the saying <em>&quot;You&#x27;ve dodged a bullet?&quot;</em>. That&#x27;s how I came to think about this kind of interview tests.</p>
<p>As I also operate on the hiring side, this provides me valuable insights into how the industry works. But if any recruiting person is reading this, please stop it. You&#x27;re hiring developers specialized in interviews. Not in creating awesome software.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[How I got a job offer from a funded startup]]></title>
            <link>http://localhost:3000/articles/how-i-got-a-job-offer-from-a-funded-startup</link>
            <guid>http://localhost:3000/articles/how-i-got-a-job-offer-from-a-funded-startup</guid>
            <pubDate>Sun, 02 May 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[How I got an exciting job offer, that I had to decline.]]></description>
            <content:encoded><![CDATA[<p>I recently got an exciting job offer, that I had to decline. This article is my attempt to share how it came to that, and what I&#x27;ve learned from it.</p>
<h2>How it started</h2>
<p>It all started with a simple tweet about a tool that I wanted to share with all of you. As the company in question asked me not to mention them in this article, I need to keep this intro a bit vague. But, that&#x27;s fine. This article is about the experience, not about <em>&quot;the startup&quot;</em> in question.</p>
<p>Shortly after that tweet, they send me a DM. They are trying to build a community around the tool and were wondering whether I remembered how/where I learned about its existence. After a few messages back and forth, they invited me to their Discord.</p>
<h2>The invite</h2>
<p>There weren&#x27;t many users in the Discord, and we were just chatting a bit about random dev stuff. In the meanwhile, I was reading a bit about <em>the startup</em> and found out they were looking for people. I didn&#x27;t consider switching jobs at the time. But as a maker, I was curious about how the development of an open source cli utility contributes to building a sustainable business.</p>
<p>They explained me that there hasn&#x27;t been an official announcement, but that they were working on an companion product. They also mentioned that they&#x27;ve noticed that I&#x27;ve <em>&quot;built some impressive stuff like <a href="https://updrafts.app">updrafts.app</a>&quot;</em>, and were happy to chat if I was interested in any of the positions.</p>
<p>I never expected that my question about their business would lead to an invite to chat. I know this is something small. But I had a moment of pride. Honestly, hearing or reading someone else say that they noticed your work, and found it impressive, feels amazing. I wish people would compliment each other more often. I&#x27;ll never know for sure, but I like to think that it was my side projects that opened this door.</p>
<p>Anyways, I wasn&#x27;t looking to switch jobs. So that&#x27;s where the story ended.</p>
<h2>Let&#x27;s talk</h2>
<p>Fast forward to April &#x27;21. They send out a tweet mentioning that they were looking to expand the team. As I also operate on the hiring side, it&#x27;s interesting for me to know what vacancies are out there, and what financial compensation companies offer. I see reading vacancies as part of my job, but I never apply as part of it. I want to stay respectful of people&#x27;s time. Going into an interview when I know there is no chance of success, is a waste of time and I find that disrespectful.</p>
<p>Their vacancies mentioned <em>&quot;Competitive salary and meaningful stock options&quot;</em>. So I went to Discord and asked if they had more specifics about that. Almost instantly, they replied with their salary range, and the range of stock options one would receive. That message was later removed. Although I don&#x27;t agree with hiding salaries, I won&#x27;t quote it out of respect to them. In that same minute, they also mentioned that they were <em>&quot;happy to hop on Zoom&quot;</em>.</p>
<p>It took me 20 minutes to come up with a proper response to that message. As I mentioned, I usually don&#x27;t jump into calls, because I don&#x27;t want to waste time if I already know it won&#x27;t be a fruitful talk. But something was different this time. One of the vacancies was like it was written towards my profile, and their salary range looked promising. <em>The startup</em> felt like an awesome company to work for. I was honestly interested, so I decided to send them a message to let them know I was ready to chat.</p>
<h2>First chat</h2>
<p>And that was honestly all I expected. We scheduled a 30-minute chat, and I expected that we would talk about what kind of company <em>the startup</em> is, and what roles they were looking to fill. Time was flying by, and our 30-minute chat turned into a 3-hour talk. I got really excited about this!</p>
<p>We talked a bit about <em>the startup</em>, how they plan to grow it into a sustainable business, and we talked a bit about my day job. I think those subjects would have fitted perfectly within that 30-minute window. If only we didn&#x27;t start the conversation around my open source work, side projects, and articles that I&#x27;ve been publishing.</p>
<p>During this first chat, it became clear that we were a perfect match. I&#x27;m able to bootstrap applications, I&#x27;m independent, can move fast, and have experience with early-stage startups. I check all the boxes in the profile that they&#x27;re looking for. I don&#x27;t mean it to brag. We were just so compatible, that I got more and more excited about this by the minute. It was like love at first sight but on a professional level.</p>
<p>We ended our call with the notice that we would both digest the conversation, and would come back to it later.</p>
<h2>They bought a license!</h2>
<p>A day after our call, I noticed that they bought a license for <a href="https://updrafts.app">updrafts.app</a>, and created an account at <a href="https://rake.red">rake.red</a>. I reached out to them on Discord, mentioned that I noticed their purchase and that I&#x27;m happy to jump on another call to walk them through what it has to offer.</p>
<p>They mentioned they&#x27;ll keep digging for a while, but would like to schedule the next call to continue our conversation from the day before. And so we did.</p>
<p>That second call didn&#x27;t last long. They mentioned that they were impressed by my work. They liked how I&#x27;m able to solve my own problems and turn them into products that can be monetized. They found my articles structured, well written, and I&#x27;m able to explain complex subjects in simple terms. I planned to ask them what they thought of the products, but it completely slipped my mind.</p>
<p>The call took about 15 - 20 minutes, and we ended with an agreement that I&#x27;d do a test task.</p>
<h2>Test Task</h2>
<p>Even though they were honestly excited about my side projects, open-source work, and articles, it wasn&#x27;t enough to exempt me from doing a test task. Their task involved <em>&quot;Creating a prototype of an interactive API documentation that can be used for user testing&quot;.</em> The description was a bit vague, and if I already had the job, I&#x27;d definitely jump on a call to get a better understanding of what they had in mind. But I approached it as a chance to show that I&#x27;m able to turn a vague customer description into a product. I believe that&#x27;s what distinguishes me from most other developers.</p>
<p>I did ask them how much time they&#x27;d expect candidates to spend on the task, to which they replied that that <em>&quot;It’s very individual, typically 3–10 hours&quot;</em>.</p>
<p>Honestly, creating something useful in 3 hours sounds impossible to me. But I was confident that I could create something in ~8 hours (a typical workday). And so I did. I <a href="https://twitter.com/meijer_s/status/1384960782069342211">tweeted about my prototype</a>, and they send a DM that they liked what they were seeing.</p>
<h2>Nailed It!</h2>
<p>Exactly a week after the second call, we had our third call. We talked about the test task, and I explained how I interpreted the task and why I&#x27;ve built the site the way I did. They mentioned that I found the right balance between trade-offs, spend my time on the right parts, and kind of nailed it. They also mentioned that ~8 hours is the sweet spot to spend on a task like this.</p>
<p>When we were done talking about the task, I came back to that forgotten question from call 2. <em>&quot;You&#x27;ve tried my products, what do you think of them?&quot;</em> I got some useful feedback out of that, and some more compliments. Which isn&#x27;t why I asked about it, but it felt nice nevertheless.</p>
<p>Shortly after the third call, I had a fourth to meet one of the colleagues. It was a more informal chat, meant as a &quot;get to know each other&quot;.</p>
<p>Three days later they made me an offer, which I later declined due to personal reasons.</p>
<h2>Lessons Learned</h2>
<p>I hear you think. Okay, nice story. But why did I read this? Well, I&#x27;ve learned a few things, and I was working towards that. So let me share what I got out of this:</p>
<ul>
<li>
<p>Visibility for the win! For the bigger part of my career, I&#x27;ve been invisible. Working as a one-man team on a business-to-business collaboration platform, while not hearing anything from anyone. Mostly triggered by covid, I&#x27;ve moved to platforms like <a href="https://meijer.ws/twitter">Twitter</a> and <a href="http://kcd.im/discord">Discord</a> to satisfy my hunger for a bit of social contact. Since then, I tweet occasionally and feel less burdened to send an innocent message like <em>&quot;got any details?&quot;</em>. A year ago, I wouldn&#x27;t have expected this, but seriously, it opens doors! Just make yourself visible. By showing your work, responding to people, or just a small chat. It doesn&#x27;t matter how, but stay respectful. It&#x27;s not about having thousands of followers either. It&#x27;s about showing who you are.</p>
</li>
<li>
<p>I believe I nailed this one because I&#x27;m confident that I&#x27;m a match. I also <a href="https://meijer.ws/articles/trivia-or-job-interview">know how to screw up</a>, but overall I have a good score of hit/miss ratio. One thing that keeps coming back, is that I fail at the interviews that come up with white-board or trivia questions. But prepare a drink, and chat with me about my experiences, apps that I&#x27;ve built, ask me how I would solve a customer&#x27;s problem, and I&#x27;m able to convince you of my strength. Not because I&#x27;m a show-off. But because I&#x27;m confident in what I do.</p>
</li>
<li>
<p>Test Tasks suck! It took 8 hours of my time. Trivia sucks more, but this ain&#x27;t awesome either. In my case, it was okay. I liked this task, and I can see myself building it into another (open-source) side project. The whole experience was motivational, and I got tons of new ideas. But I would never ask a candidate to do the same. Especially not as vague as this one was. And there it was again. The Trivia. Should I ask for more details to build exactly what they expect? Or would the simple fact of asking, make me fail this round?</p>
</li>
<li>
<p>When possible, stay in touch! I think one of the nice things about this experience was that it was just so informal. I didn&#x27;t wait for the next call to let them know I noticed their purchase of one of my apps. And they didn&#x27;t wait for the next call to let me know that they liked my task result. This back and forth messaging between the calls, has a binding effect. It strengthens your relationships and thereby improves your chance of success. But again, don&#x27;t overdo it. Stay respectful and professional.</p>
</li>
</ul>
<h2>Final Words</h2>
<p><em>The startup</em> felt like an awesome company to work for. I didn&#x27;t accept the position, but I can imagine that there will be days that I&#x27;m thinking back to this experience with the thought that I&#x27;ve made the wrong choice.</p>
<p>The calls were nice, and the task was highly relevant for the position that I was applying for. If you&#x27;re looking for a job, I recommend taking a look at...</p>
<p>Sorry, this is where it ends. They asked me to remove all references to their company and personal names. So I can&#x27;t point you to their jobs page, or discord. Follow me instead? You can find me on <a href="https://meijer.ws/twitter">Twitter</a> and my other articles are listed at <a href="https://meijer.ws/articles">meijer.ws/articles</a>.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[A quick dive into generators]]></title>
            <link>http://localhost:3000/articles/a-quick-dive-into-generators</link>
            <guid>http://localhost:3000/articles/a-quick-dive-into-generators</guid>
            <pubDate>Mon, 12 Apr 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Generators and what makes them so special]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve briefly mentioned generators earlier in my <a href="https://meijer.ws/articles/three-ways-to-handle-recursion">article about recursion</a>. Today, I&#x27;m going to explain the concept of generators to you, and why I believe that they are an important thing to know. If you haven&#x27;t read that article, I&#x27;d recommend doing so, as this explanation builds upon that one.</p>
<h2>Introduction</h2>
<p>Let&#x27;s take the recursive function and the recursive generator function from the earlier article. Both these functions convert a tree-like structure to a flat list where each item has an <code>id</code> and a <code>parent</code> property:</p>
<p>The recursive function looked like:</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">,</span> parent<span class="token operator">?</span><span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">FlatNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nodes<span class="token operator">:</span> <span class="token maybe-class-name">FlatNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> parent<span class="token operator">?.</span>id <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nodes<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token method function property-access">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node<span class="token punctuation">.</span><span class="token property-access">children</span> <span class="token operator">===</span> <span class="token string">&#x27;object&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nodes<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token method function property-access">flatten</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> nodes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>While it&#x27;s generator variant looked like:</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">Generator</span><span class="token operator">&lt;</span><span class="token maybe-class-name">FlatNode</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">yield</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> parent<span class="token operator">?.</span>id <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node<span class="token punctuation">.</span><span class="token property-access">children</span> <span class="token operator">===</span> <span class="token string">&#x27;object&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now, most of my projects have an utility that I named <code>ensureArray</code>. It&#x27;s a nifty little helper that wraps values in an array, unless it already is an array. Something like:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ensureArray</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> object <span class="token operator">===</span> <span class="token string">&#x27;undefined&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> object<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>object<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>I share this because this little utility lets me clean up these functions and make the similarities more obvious. I&#x27;ll also stop annotating the examples with types, to further reduce the noise.</p>
<h2>Recursive generators</h2>
<p>In case you&#x27;ve never seen generators before, (overly simplified), generators are functions decorated with an <code>*</code> and using the <code>yield</code> keyword to return values. There is a lot to read about them, but the nice thing is that they are executed lazily. Meaning, when we call <code>flatten</code> here, it&#x27;s possible to only process the first <code>n</code> nodes, and ignore the rest. Where the non-generator variant would first process the entire tree, only to discard everything afterward, generators allow us to only process the absolute minimum of what&#x27;s required for the task at hand.</p>
<p>We&#x27;ll come back to that. Let&#x27;s take a look at the implementation first. I&#x27;ve simplified the examples from above using the <code>ensureArray</code> helper, and I&#x27;ve added a log statement:</p>
<p>Recursive function:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;flatten&#x27;</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span> <span class="token literal-property property">parent</span><span class="token operator">:</span> parent<span class="token operator">?.</span>id <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> <span class="token function">ensureArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nodes<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token method function property-access">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> nodes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Recursive generator:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;flatten&#x27;</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">yield</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span> <span class="token literal-property property">parent</span><span class="token operator">:</span> parent<span class="token operator">?.</span>id <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> <span class="token function">ensureArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>You see the similarities, right? I hope that makes it less daunting.</p>
<p>Instead of adding the node to an array, we directly <code>yield</code> (return) it, and instead of pushing nested nodes to that same array, we also <code>yield</code> those. The <code>*</code> that you&#x27;ll see behind that second yield, is syntactic sugar to <code>yield</code> all results in an array/iterator individually.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>could just as well be written as:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">yield</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Lazy evaluation</h2>
<p>So the thing I mentioned earlier about the lazy behavior? Imagine we need to do something only for the first three nodes in that tree. We would write something like this:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token function">flatten</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;handle&#x27;</span><span class="token punctuation">,</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Using the traditional, non-generator approach, this would result in the following log:</p>
<pre class="language-shell"><code class="language-shell">flatten <span class="token number">1</span>
flatten <span class="token number">2</span>
flatten <span class="token number">3</span>
flatten <span class="token number">4</span>
flatten <span class="token number">5</span>
flatten <span class="token number">6</span>
flatten <span class="token number">7</span>
flatten <span class="token number">8</span>
flatten <span class="token number">9</span>
flatten <span class="token number">10</span>
flatten <span class="token number">11</span>
handle <span class="token number">1</span>
handle <span class="token number">2</span>
handle <span class="token number">3</span>
</code></pre>
<p>That log tells us that the entire tree is processed and converted to the flat array before we can handle the 3 nodes that we need. The processing time that we used for those other 8 nodes, is wasted.</p>
<p>Now, if we&#x27;d do the same with that generator function, we&#x27;d need to change the syntax a bit:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token function">flatten</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;handle&#x27;</span><span class="token punctuation">,</span> nodes<span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>We no longer use the <code>idx</code> property, but instead, call the <code>next</code> function from the <code>nodes</code>.</p>
<p>The <code>flatten</code> call itself doesn&#x27;t do much there. It does not invoke the <code>flatten</code> function. The log on that first line? It&#x27;s not printed. Instead, the call prepares the generator and returns an object with a <code>next</code> method. When we call the <code>next</code> method, the generator will run till the next <code>yield</code> inside that function. When it meets that <code>yield</code>, it will return the value that&#x27;s being yielded.</p>
<p>The return value of <code>next</code> is not just that yielded value. It&#x27;s an object with a <code>value</code> prop, holding your yielded value, and a <code>done</code> property, holding a boolean that will tell you if this generator is done generating values.</p>
<p>So the output from that last loop?</p>
<pre class="language-shell"><code class="language-shell">flatten <span class="token number">1</span>
handle <span class="token number">1</span>
flatten <span class="token number">2</span>
handle <span class="token number">2</span>
flatten <span class="token number">3</span>
handle <span class="token number">3</span>
</code></pre>
<p>It&#x27;s important to understand that the output order has changed. We can handle the node, as soon as the generator yields one. It doesn&#x27;t yield all nodes at once, it yields every node individually, as soon as it has it. We don&#x27;t need to wait for the entire tree to be processed. In fact, the processing won&#x27;t continue, until we explicitly ask for the next node.</p>
<p>Once we&#x27;ve handled our three nodes, we stop our loop, and the tree is not further processed. We haven&#x27;t wasted any processing time using the generator approach.</p>
<p>You probably don&#x27;t always need loops, and sometimes you do want to process all or nothing. In those cases, it&#x27;s trivial to wrap the call in <code>Array.from</code>, to get all nodes at once. Just like you would have with the non-generator approach:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{ id:  … }]</span>
</code></pre>
<p>We&#x27;ve used a simple loop in this example, but you can imagine that this is quite powerful. Without changes to the generator itself, it can be wrapped with logic to only handle the first <code>n</code> results, or only process until a certain condition is met.</p>
<p>Also, isn&#x27;t it just beautiful, how easy it is to write recursive functions this way? No intermediate arrays. No return complexity. Recursive tree parsing, in 3 lines. All it asks is to get familiar with <code>yield</code>.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">yield</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span> <span class="token literal-property property">parent</span><span class="token operator">:</span> parent<span class="token operator">?.</span>id <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> <span class="token function">ensureArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Final word</h2>
<p>Generators might look a bit scary at first, but they come with a lot of flexibility and power. I can imagine that they look daunting, especially for inexperienced developers. But I would really recommend getting familiar with them. They make a great asset to your utility belt.</p>
<p>If you have questions related to this subject, please let me know in the comments. I&#x27;m happy to explain things in more detail.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Three ways to handle recursion]]></title>
            <link>http://localhost:3000/articles/three-ways-to-handle-recursion</link>
            <guid>http://localhost:3000/articles/three-ways-to-handle-recursion</guid>
            <pubDate>Sat, 10 Apr 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Walking down a tree using a function, loop or generator]]></description>
            <content:encoded><![CDATA[<p>This is a follow-up post on <a href="https://meijer.ws/articles/you-might-not-need-recursion">You might not need recursion</a>. In this article, I&#x27;m going to show you three different ways to convert a Tree data structure, to a flat list while maintaining a reference to the parent.</p>
<p>Let&#x27;s start with the input that we&#x27;re working with:</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Node</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token maybe-class-name">Node</span> <span class="token operator">|</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> tree<span class="token operator">:</span> <span class="token maybe-class-name">Node</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  children<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>As you can see, this tree has a hierarchical structure. Every node has an <code>id</code>, and an optional property called <code>children</code> which is either an <code>array</code> or an <code>object</code>.</p>
<p>We&#x27;re going to convert this to a flat array holding items with an <code>id</code> and a <code>parent</code> property:</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">FlatNode</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  parent<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> output<span class="token operator">:</span> <span class="token maybe-class-name">FlatNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  …
<span class="token punctuation">]</span>
</code></pre>
<h2>Recursive function</h2>
<p>When working with Tree-like structures like the one above, we tend to write recursive functions by default. Despite the fact that recursion is hard to grasp for a lot of us. Even amongst senior developers, with many years of experience.</p>
<p>When we write a recursive function to handle this, we end up with something like the following:</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">,</span> parent<span class="token operator">?</span><span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">FlatNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nodes<span class="token operator">:</span> <span class="token maybe-class-name">FlatNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> parent<span class="token operator">?.</span>id <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nodes<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token method function property-access">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node<span class="token punctuation">.</span><span class="token property-access">children</span> <span class="token operator">===</span> <span class="token string">&#x27;object&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nodes<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token method function property-access">flatten</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> nodes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>When calling <code>flatten(tree)</code>, it starts processing at the root node and recursively walks down the tree walking over the children, to return them as a <code>FlatNode</code>. To be able to keep the reference to the parent, we need to pass in the parent as an additional function argument.</p>
<p>There is nothing wrong with this function. And I believe that it&#x27;s perfectly understandable. However, my experience also tells me that I will have coworkers working on the same code base, that find this concept hard to understand.</p>
<p>If you haven&#x27;t worked with recursion before, and think you&#x27;ll understand what&#x27;s going on, I want to challenge you. Take the <code>tree</code> object from above, and write this <code>flatten</code> function without looking back to my example before you have a working result.</p>
<h2>Flat iteration</h2>
<p>This recursive function can also be rewritten to a flat loop. The following example has the same input and output as the recursive function, but all operations take place in a single call frame. There is no recursion and there are no calls to an external function.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>rootNode<span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">FlatNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nodes<span class="token operator">:</span> <span class="token maybe-class-name">FlatNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>rootNode<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token spread operator">...</span>child<span class="token punctuation">,</span> parent<span class="token operator">:</span> node <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node<span class="token punctuation">.</span><span class="token property-access">children</span> <span class="token operator">===</span> <span class="token string">&#x27;object&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      queue<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token spread operator">...</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> node <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    nodes<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token operator">?.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> nodes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now, I do believe that this is easier to follow for people unfamiliar with recursion. But I also think that the difference in complexity is fading. This is a more complex function than the one from <a href="https://meijer.ws/articles/you-might-not-need-recursion#iterative">my earlier article</a> because the subject is more advanced as well.</p>
<p>From the performance point of view, in Chrome the recursive function is twice as fast, while in Firefox the non-recursive function is the faster one.</p>
<p>Also, mind that while the output has the same structure, the resulting nodes are in a different order. The recursive function eagerly moves to the child nodes and handles children before siblings. While the loop handles siblings before children. Making both functions merge their results in a different order.</p>
<h2>Recursive generators</h2>
<p>Generators are particularly well suited to tackle recursive problems.</p>
<p>In case you&#x27;ve never seen generators before, (overly simplified), generators are functions decorated with an <code>*</code> and using the <code>yield</code> keyword to return values.</p>
<p>Let&#x27;s take a look at the implementation:</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> <span class="token maybe-class-name">Node</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">Generator</span><span class="token operator">&lt;</span><span class="token maybe-class-name">FlatNode</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">yield</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> parent<span class="token operator">?.</span>id <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node<span class="token punctuation">.</span><span class="token property-access">children</span> <span class="token operator">===</span> <span class="token string">&#x27;object&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now, this solution will return the values in the same order as the recursive function. In fact, they do look quite similar, except that we don&#x27;t need that temporary <code>nodes</code> array to merge the results.</p>
<p>Instead of adding the node to an array, we directly <code>yield</code> (return) it, and instead of pushing nested nodes to the same array, we also <code>yield</code> those.</p>
<h2>Final word</h2>
<p>Whatever you prefer is fine. I think it&#x27;s most important to choose the method that&#x27;s most familiar to your team and most fitting to your requirements. Remember that for inexperienced developers the loop is easier to understand and that it&#x27;s always the easiest one to debug.</p>
<p>I personally would recommend getting familiar with generators. They look a bit scary at first, but they come with a lot of flexibility and power.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[You might not need recursion]]></title>
            <link>http://localhost:3000/articles/you-might-not-need-recursion</link>
            <guid>http://localhost:3000/articles/you-might-not-need-recursion</guid>
            <pubDate>Fri, 09 Apr 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Flat loops as an alternative for complex recursive functions]]></description>
            <content:encoded><![CDATA[<p>A recursive function repeatedly calls itself until a condition is met that makes it stop. Recursive functions are tricky to get right. They require a solid exit strategy and will result in an error telling you that the <code>Maximum call stack size exceeded</code> if you mess up.</p>
<p>Recursion is often used to process tree-like structures, and sometimes to fetch an unknown number of pages from external paginated APIs. In this article I&#x27;m going to show you an alternative for that recursive function, that will improve readability.</p>
<p>I&#x27;m going to take the &quot;fetch from remote&quot; example and will be working with a fetch mock. I&#x27;m won&#x27;t explain this function in detail, but it has the same signature as <code>fetch</code>, and returns a result existing of <code>nodes</code>, an <code>endCursor</code>, and <code>hasMore</code> to tell us if there are more pages available. The idea is to fetch more pages, as long as <code>hasMore</code> equals <code>true</code>.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> idx <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> <span class="token punctuation">{</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>body <span class="token operator">||</span> <span class="token string">&#x27;{}&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">after</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> after <span class="token operator">===</span> <span class="token string">&#x27;undefined&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    after <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">json</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> nodes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span>after <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> after <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> lastNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> endCursor <span class="token operator">=</span> lastNode <span class="token operator">?</span> lastNode<span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> hasMore <span class="token operator">=</span> lastNode <span class="token operator">?</span> lastNode<span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token operator">&lt;</span> db<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

      <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span> nodes<span class="token punctuation">,</span> endCursor<span class="token punctuation">,</span> hasMore <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchPage</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> after <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#x27;https://example.com&#x27;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> after <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>It&#x27;s okay to directly forget that snippet. I&#x27;m just sharing it so that you have all the code that I&#x27;m working with, and you&#x27;ll be able to run it in a repl if you want to. If you&#x27;ve worked with APIs before, this structure is likely to look familiar.</p>
<h3>Recursive function</h3>
<p>Here you&#x27;ll see the most traditional approach for a recursive function. First, we fetch a page from the API. If there are no more pages (indicated by <code>hasMore</code>), we return the result and walk back up the tree. Otherwise, we call <code>fetchAllNodes</code> again. Note, that this is the same function as we are currently running. That&#x27;s what makes it &quot;recursive&quot;. The function calls itself.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchAllNodes</span><span class="token punctuation">(</span><span class="token parameter">after</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> after <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token property-access">hasMore</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> result<span class="token punctuation">.</span><span class="token property-access">nodes</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// recursive call</span>
  <span class="token keyword">const</span> innerNodes <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchAllNodes</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token property-access">endCursor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>result<span class="token punctuation">.</span><span class="token property-access">nodes</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>innerNodes<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The return statement of this function merges the &quot;direct result&quot; and the &quot;nested result&quot; before it returns. Note that this is not always directly the final result. A function like this walks &quot;down the tree&quot; before it walks back &quot;up the tree&quot;. Visualized differently, the call stack looks something like this:</p>
<pre class="language-bash"><code class="language-bash">fetchAllNodes<span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>
  <span class="token comment"># result.nodes = [{ id: 0 }, { id: 1 }]</span>
  
  fetchAllNodes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># result.nodes = [{ id: 2 }, { id: 3 }]</span>
    
    fetchAllNodes<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
      <span class="token comment"># result.nodes = [{ id: 4 }, { id: 5 }]</span>
      
      fetchAllNodes<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token comment"># result.nodes = [{ id: 6 }, { id: 7 }]</span>
        
        fetchAllNodes<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
          <span class="token comment"># result.nodes = [{ id: 8 }, { id: 9 }]</span>
          <span class="token builtin class-name">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id: <span class="token number">8</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
 
        <span class="token comment"># merge results</span>
        <span class="token builtin class-name">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id: <span class="token number">6</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">7</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">8</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
        
      <span class="token comment"># merge results</span>
      <span class="token builtin class-name">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id: <span class="token number">4</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">5</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">6</span> <span class="token punctuation">}</span>, …, …, <span class="token punctuation">{</span> id: <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
      
     <span class="token comment"># merge results</span>
    <span class="token builtin class-name">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id: <span class="token number">2</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">3</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">4</span> <span class="token punctuation">}</span>, …, …, …, …, <span class="token punctuation">{</span> id: <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
    
  <span class="token comment"># merge results</span>
  <span class="token builtin class-name">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id: <span class="token number">0</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">1</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> id: <span class="token number">2</span> <span class="token punctuation">}</span>, …, …, …, …, …, …, <span class="token punctuation">{</span> id: <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre>
<p>You&#x27;ll see that the fifth call to this function is wrapped by the fourth, which is wrapped by the third, which is wrapped by the second, which is wrapped by the first.</p>
<p>Now, this is a request chain that completes in 5 calls. Imagine this when fetching pages from a remote with tens, or even hundreds of pages. The call stack keeps growing, and all variables inside that function stay in memory. Not just one page-result, but all of them. Merged, as well as individual. Garbage collection can only clean up after the final result has been returned, and all requests have come to an end.</p>
<h2>Tail call optimization</h2>
<p>Tail call optimization should be able to reduce the performance hunger of the situation above, by optimizing functions that have a function call as a return statement.</p>
<p>To make use of this optimization, we should return the function call instead of the node array. To be able to still merge the results, we need to adjust the function signature and pass the current result as argument.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchAllNodes</span><span class="token punctuation">(</span><span class="token parameter">after<span class="token punctuation">,</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> after <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> allNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>nodes<span class="token punctuation">,</span> <span class="token spread operator">...</span>result<span class="token punctuation">.</span><span class="token property-access">nodes</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token property-access">hasMore</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> allNodes<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// recursive tail call</span>
  <span class="token keyword control-flow">return</span> <span class="token function">fetchAllNodes</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token property-access">endCursor</span><span class="token punctuation">,</span> allNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Even though tail call optimization is part of the ECMAScript specification, at the moment of writing, Safari is the only browser that <a href="https://kangax.github.io/compat-table/es6/#test-proper_tail_calls_(tail_call_optimisation)">has this implemented</a>. So which style you prefer, is mostly a personal preference at the time being.</p>
<h2>Iterative</h2>
<p>Like I already mentioned in the title; <em>you might not need recursion</em>. The functions above can be rewritten to a more simple while loop:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchAllNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> after<span class="token punctuation">;</span>

  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>after <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> after <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodes<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span>result<span class="token punctuation">.</span><span class="token property-access">nodes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    after <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token property-access">endCursor</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> nodes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>It looks so simple and obvious when you see it. And yet, there are articles that will explain how to fetch recursively. Compared to the recursive version, the last example has a reduced memory footprint, because we don&#x27;t need to keep track of all frames and in-between results. This is a single function call, in a single frame.</p>
<p>When you run into more complex scenarios, it will be easier to add things like error handling, scheduling, retries, or even to add workers that will do stuff in parallel.</p>
<p>But maybe even more importantly; the loop is way easier to read and understand.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[My Career and Lessons Learned in a Nutshell]]></title>
            <link>http://localhost:3000/articles/my-career-and-lessons-learned-in-a-nutshell</link>
            <guid>http://localhost:3000/articles/my-career-and-lessons-learned-in-a-nutshell</guid>
            <pubDate>Tue, 23 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[How I became as productive as I am.]]></description>
            <content:encoded><![CDATA[<p>It has now happened a few times that I got asked how I &quot;can be so productive&quot;. In this article, I&#x27;ll tell you my story.</p>
<h2>Intro</h2>
<p>For me personally, 2020 was the year that I became more visible on Twitter and in the (Open Source) dev community. Not that I&#x27;m famous and have lots of followers, but it did provide me a small group of people that I now consider to be my friends.</p>
<p>This last year, I&#x27;ve built and published several smaller open-source libraries, as well as bigger projects like <a href="https://testing-playground.com">testing-playground</a> and <a href="https://updrafts.app">updrafts.app</a>. <a href="https://github.com/smeijer/leaflet-geosearch">leaflet-geosearch</a> crossed 1 million downloads 🤯 , and I recently shifted to work on my next project, <a href="https://rake.red">rake.red</a>. All of this besides my day-job, where I make a living with the development of a business-to-business collaboration platform.</p>
<p>It&#x27;s not all puppies and moonshine, but I&#x27;ve already talked about that in my blog about <a href="https://meijer.ws/articles/work-from-home-the-struggle-of-2020">The struggle of 2020</a>, so that&#x27;s not what this article is about.</p>
<h2>Being Productive</h2>
<p>It has now happened a few times that I got asked questions that boiled down to the question of how I become &quot;so productive&quot;.</p>
<p>This question is often asked by developers with far less experience than myself. That&#x27;s not a problem. Instead, I believe it&#x27;s the answer. When I seem to be more productive than you or iterate faster than you, it might have something to do with the fact that I&#x27;ve been creating software for over 15 years, and launched my first SaaS almost 10 years ago.  <em>(I guess I have to celebrate on Sept&#x27; 17, 2021 🎉)</em>. That&#x27;s the story you don&#x27;t see on social media. You&#x27;ll see the makers publishing their things, but you often don&#x27;t see all those silent hours or years even.</p>
<p>Don&#x27;t get me wrong. You don&#x27;t need those 15 years to catch up. The world of web development changes so fast, that most of my knowledge of &gt; 5 years ago, has become obsolete. But try to compare it to athletes or formula one drivers. We are well aware that every record made, will be broken. There will be someone faster than the current record holders. But we also know that you can&#x27;t beat an athlete, while you&#x27;re untrained.</p>
<p>No matter who the developer is that you look up to, I&#x27;m sure they had many years of training.</p>
<h2>Getting Experienced</h2>
<p>Most of my experience comes from making mistakes and self-reflection. I constantly wonder if something that I just did, could have been done better, or more efficiently. I have no education in the direction of computer science, and I have never followed any developer course or boot camp.</p>
<p>The first code I&#x27;ve written professionally was to automate my own work. I started my career being a CAD operator and noticed the patterns and repetition in my drawings. AutoCAD had an interface for c#.net, and I used that to reduce days of manual labor, to minutes of watching and assisting the computer making those drawings.</p>
<p>Eventually, I ended up being experienced with C# and used that to solve more problems. Not long after that, we got confronted with new Dutch laws and obligations involving underground infrastructures such as cables and pipelines. The implementation of that law created a need for a pipeline management portal, and I decided to build it. My first SaaS was born, and I got a few big companies as customers.</p>
<p>This SaaS ultimately lead to my decision to switch careers and to make a living with software development instead.</p>
<h2>Leveling Up</h2>
<p>A related question that I often get, is how to get better at stuff, how to learn faster, and even how to enjoy learning.</p>
<p>My belief is that learning is a means, not an end. I&#x27;ve never approached learning something as the goal. I don&#x27;t think I could learn that way.</p>
<p>Instead, I build something like testing-playground.com, because I see the need. When I choose the stack, I might add one or two things that sound like a good investment to get familiar with. For testing-playground, I choose to use react because I was familiar with it, and I chose to deploy to Netlify so I could learn a bit about serverless functions. I don&#x27;t approach that as &quot;<em>Oh my, I&#x27;m going to learn serverless! So much fun!</em>&quot;. I&#x27;m simply solving the problem that there wasn&#x27;t a repl for testing-library. Learning serverless, was a nice bonus to add to my resume.</p>
<p>It&#x27;s definitely satisfying to see the final product go online. And maybe even a bit satisfying that I made it work on Netlify. But &quot;<em>learning serverless</em>&quot; was never the goal and was not what gave me satisfaction. Using it to provide a solution for a problem, does that for me.</p>
<h2>Making Mistakes</h2>
<p>I learn most from making and recognizing mistakes. Self-reflection is extremely important, especially if you don&#x27;t have anyone around that can or will point out your mistakes. If you do have coworkers, but nobody points out mistakes, it doesn&#x27;t mean that you&#x27;re fault-free. I honestly don&#x27;t think anyone (in this industry) is.</p>
<p>Over the years I&#x27;ve made quite a few mistakes. I&#x27;ll list a couple, so we can both learn from it:</p>
<h3>Gradually migrating to new tech</h3>
<p>This one is not that black and white. But what I mean by that, is that I&#x27;m currently maintaining a codebase (NodeJS / MongoDB based) that dates back to 2014. At that time, we were still using node v0.10! Over the years, we&#x27;ve migrated from Blaze to React, from class components to functional components, from hocs to hooks, from REST to GraphQL, and I had a few more &quot;brilliant ideas&quot; that I implemented in that codebase in the months that I was the sole developer. Partially because that new tech looked better, partially because I blindly followed the latest trend, and partially because I wanted to try something new.</p>
<p>I do regret that. If I could do it over, I would have skipped a few migrations and stuck to current conventions. This is one of the reasons that I now have more side projects. If I want to play with something new, I&#x27;m going to do that in a side project, instead of the project that makes my living.</p>
<p>There is nothing wrong with migrating. But due to lack of time, not all migrations were complete. So there are multiple conventions used in a single codebase. That does not do good for maintainability.</p>
<h3>Code Complexity</h3>
<p>Another mistake I made in the past, was related to functional programming. I&#x27;m not talking about React functional components. I&#x27;m talking about using lenses, traversals, currying, point-free functions, and immutability. In simpler terms, manipulating data using <code>ramda.js</code> and <code>partial.lenses</code>. They all have their purposes, but at a certain moment, I tried making everything point-free. Resulting in unnecessary complex code. I learned my lesson and took a step back. I still use the knowledge I gained from functional programming, but I apply the concepts a bit less fanatical. Readability first.</p>
<p>I think the main lesson here, is that shorter code is not always better. Write for readability. Your future self will appreciate it.</p>
<h3>Follow the hype</h3>
<p>I made this mistake twice, and (hopefully) won&#x27;t make it again.</p>
<p>The first time was when MDG announced that they were dropping support for their view layer Blaze. I quickly migrated to React, but because I was working on the product alone, this was consuming valuable time. I&#x27;m convinced that if I would have stuck with Blaze, the application would still work perfectly fine. We could have used that time differently, without any serious impact.</p>
<p>The second time was with hooks. I like hooks! But the mistake I made, was to ask the team to refactor all components during the next few sprints. It took more time than expected, and because the tech was new to everyone, mistakes were made and new bugs were introduced.</p>
<p>I&#x27;m not sure if I should add GraphQL to this list, but I jumped aboard the train, and our platform currently uses GraphQL for a private API. I do like the tech, but it does make things more complicated than strictly required. In hindsight, I believe that REST would have been a better choice for us.</p>
<h2>Final word</h2>
<p>I&#x27;ve never worked for an IT company. I&#x27;m currently self-employed and work together with non-technical partners in a joint firm. I don&#x27;t do well in interviews, and yet I build and maintain a number of (web) applications.</p>
<p>Unless you truly get energy from the learning itself, I would advise you to stop pursuing knowledge. If you need to learn something for your work, do it during business hours. It&#x27;s part of the job! If you want to learn something for yourself, create something. Create a solution to your problems, and knowledge will come along the way. The harder the problem, the more you&#x27;ll learn from solving that, and the greater the satisfaction will be when you&#x27;ve done it.</p>
<p>Believe in yourself, don&#x27;t let anyone hold you down, and don&#x27;t feel obligated to learn in your personal time! Self-education is a choice, not an obligation.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[TypeScript Type Guards and Type Predicates]]></title>
            <link>http://localhost:3000/articles/typescript-type-guards-and-type-predicates</link>
            <guid>http://localhost:3000/articles/typescript-type-guards-and-type-predicates</guid>
            <pubDate>Mon, 22 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[How to use Type Guards to narrow types in TypeScript.]]></description>
            <content:encoded><![CDATA[<p>Union types enable us to accept parameters of multiple, different types. Provide either type <code>x</code> or <code>y</code>. Sometimes, these types aren&#x27;t 100% compatible. They serve the same goal but have different properties. At a later stage, we might want to run some code based on the exact type. This is where type guards and type predicates come in.</p>
<h2>Getting Started</h2>
<p>Let&#x27;s start with declaring some types. I like to look at some code when trying to explain stuff. It makes me grasp the concept better.</p>
<p>Assume that we are building a blog and have two types, that form a single union.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Article</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  frontMatter<span class="token operator">:</span> <span class="token maybe-class-name">Record</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">NotFound</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> 
  notFound<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Page</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">Article</span> <span class="token operator">|</span> <span class="token maybe-class-name">NotFound</span><span class="token punctuation">;</span>
</code></pre>
<p>The concrete types are <code>Article</code> and <code>NotFound</code>, while <code>Page</code> is the union. The goal is to write a function to render a page. I&#x27;m not going into details about the requirements of checking if a blog exists, and when to invoke that <code>notFound</code> function, but imagine that we have a single render function. Based on the contents in the database, we render either the article, or a not found page. Something like:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>slug<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> article <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token property-access">articles</span><span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> slug <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> page <span class="token operator">=</span> article <span class="token operator">??</span> <span class="token punctuation">{</span> notFound<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> <span class="token function">render</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The challenge that we&#x27;re dealing with, is when we need to know if <code>handleRequest</code> passed an <code>Article</code> or a <code>NotFound</code> type to <code>render</code>. In JavaScript, you&#x27;d use something like:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token maybe-class-name">Page</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> page<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token string">&#x27;404 — not found&#x27;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>But in TypeScript, that&#x27;s not going to work. It will throw an Error mentioning that the property <code>content</code> does not exist on type <code>Page</code>.</p>
<pre class="language-shell"><code class="language-shell">Property <span class="token string">&#x27;content&#x27;</span> does not exist on <span class="token builtin class-name">type</span> <span class="token string">&#x27;Page&#x27;</span><span class="token builtin class-name">.</span>
  Property <span class="token string">&#x27;content&#x27;</span> does not exist on <span class="token builtin class-name">type</span> <span class="token string">&#x27;NotFound&#x27;</span><span class="token builtin class-name">.</span>
</code></pre>
<p>That&#x27;s because not all the types in the union include that property. To fix this, we need to add a type guard.</p>
<h2>Type Guard</h2>
<p>A type guard is an expression that performs a runtime check that guarantees the type in the current scope.</p>
<p>The quick fix is to replace that <code>page.content</code> check with something TypeScript would understand:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token maybe-class-name">Page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token string">&#x27;content&#x27;</span> <span class="token keyword">in</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> page<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token string">&#x27;404 — not found&#x27;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This works, but it does come at a maintainability cost. The benefit of TypeScript is that it will warn us when we remove a property that&#x27;s being used. With this change, TypeScript won&#x27;t warn us when we rename the <code>content</code> property to <code>body</code> for example.  Or when we made a typo in <code>&#x27;content&#x27;</code>.</p>
<p>This is why type predicates are interesting.</p>
<h2>Type Predicate</h2>
<p>The type predicate, is the return type of a function like this:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">isArticle</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token maybe-class-name">Page</span><span class="token punctuation">)</span><span class="token operator">:</span> page <span class="token keyword">is</span> <span class="token maybe-class-name">Article</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token string">&#x27;content&#x27;</span> <span class="token keyword">in</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>It&#x27;s not the whole function that&#x27;s the predicate. The predicate is <code>page is Article</code>. Also good to know, <code>&#x27;content&#x27; in page</code> is not a type guard in this context. It&#x27;s a simple expression. The type guard is the <code>if</code> statement that causes TypeScript to narrow the type.</p>
<p>So, the function above looks quite similar to that earlier type guard and comes with the same maintainability issue. But, now that we&#x27;ve extracted it, we can also solve that.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">isArticle</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token maybe-class-name">Page</span><span class="token punctuation">)</span><span class="token operator">:</span> page <span class="token keyword">is</span> <span class="token maybe-class-name">Article</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>page <span class="token keyword module">as</span> <span class="token maybe-class-name">Article</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">content</span> <span class="token operator">!==</span> <span class="token string">&#x27;undefined&#x27;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This works and will error when we refactor <code>Article</code> and remove the <code>content</code> property.</p>
<p>Functions that are declared as type predicate, must return a boolean. When the return value is <code>true</code>, TypeScript assumes that the return type is the one that&#x27;s declared in the type predicate. If this function returns true, TypeScript assumes that the provided argument <code>page</code> is of type <code>Article</code>.</p>
<p>When we&#x27;d call this method inside our render function:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token maybe-class-name">Page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isArticle</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> page<span class="token punctuation">.</span><span class="token property-access">content</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token string">&#x27;404 — not found&#x27;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>TypeScript knows that <code>page.content</code> exists, because inside the if scope, <code>page</code> is of type <code>Article</code>. The <code>if (isArticle(page))</code> expression, is a type guard.</p>
<p>After the if statement, <code>page</code> is not of type <code>Article</code>. And because our union only has 2 types, TypeScript is also aware that it must be of type <code>NotFound</code>  at that stage.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Simplify your Dev Environment with PM2]]></title>
            <link>http://localhost:3000/articles/simplify-your-dev-environment-with-pm2</link>
            <guid>http://localhost:3000/articles/simplify-your-dev-environment-with-pm2</guid>
            <pubDate>Sun, 21 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Use PM2 to turn multiple startup commands into a single one.]]></description>
            <content:encoded><![CDATA[<p>Do you recognise that scenario were starting a project in dev mode, requires multiple actions to be taken? I think we all have or had those cases. Start a local database, start a node app, and maybe even start some file watchers to watch and compile css files or other assets.</p>
<p>We are well aware that there are recommended ways to solve this. If you&#x27;d ask around, you&#x27;ll often be advised to solve this with docker (compose).</p>
<p>There is an easier way to this tho! One that doesn&#x27;t directly make you a DevOps, but lets you stick to the tech that you&#x27;re comfortable with.</p>
<h2>Getting Started</h2>
<p>When you&#x27;ll read the landing page at <a href="https://pm2.keymetrics.io/">keymetrics</a>, you&#x27;ll notice that PM2 is positioned as &quot;<em>a daemon process manager that will help you manage and keep your production application online 24/7</em>&quot;.</p>
<p>I&#x27;m here to tell you that it&#x27;s also perfectly suited for applications in development mode. Not to keep your app online 24/7, but to manage the processes, and spawn multiple processes at once.</p>
<p>For the development of <a href="https://rake.red">rake.red</a>, I needed to invoke multiple commands to get my dev environment up and running:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> run start:db      <span class="token comment"># start mongodb</span>
<span class="token function">npm</span> run start:pubsub  <span class="token comment"># start pub/sub server</span>
<span class="token function">npm</span> run start:dev     <span class="token comment"># start node app</span>
</code></pre>
<p>By writing a single pm2 config script, once, starting my dev environment became as simple as:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> run dev           <span class="token comment"># start them all!</span>
</code></pre>
<h2>Setup PM2</h2>
<p>So, first things first. Navigate to the root of your project, and install <a href="http://npmjs.com/pm2">pm2</a>. It&#x27;s a node module, so nothing too exciting.</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> i pm2
</code></pre>
<p>Next, you&#x27;ll need to write that config file. This might require a bit of research from your side. But if you know the commands that you need to invoke to get your current environment up and running, this shouldn&#x27;t be too hard.</p>
<p>The config is a file named <code>pm2.config.js</code>, that exports a config object, with <code>apps</code> in it. In PM2 terms, you&#x27;ll be writing the <a href="https://pm2.keymetrics.io/docs/usage/application-declaration/#ecosystem-file"><code>Ecosystem file</code></a></p>
<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">apps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>You can add as many apps there ad you&#x27;d like. Rake.red is build with <a href="https://nextjs.org"><code>nextjs</code></a>, so let&#x27;s use that one as example:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// pm2.config.js</span>
module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">apps</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#x27;Next&#x27;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token string">&#x27;next dev&#x27;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#x27;data&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;docs&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">&#x27;development&#x27;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Let&#x27;s walk over the options.</p>
<p><strong>name</strong></p>
<p>The <code>name</code> is simply a name that you can assign to it. You&#x27;ll see this name in the terminal when you have log statements, but besides that, it doesn&#x27;t matter much what you write there.</p>
<p><strong>script</strong></p>
<p>The <code>script</code> property, is the command that you run to get this part of your environment running. I had <code>next dev</code> aliased as <code>dev</code> script in my package.json (<code>&quot;dev&quot;: &quot;next dev&quot;</code>), so I could just as well set <code>script: &#x27;npm run start:dev&#x27;</code>, but I&#x27;d like to keep my pm2 config free from my npm scripts. That way, I can clean up package.json and have fewer cross dependencies.</p>
<p><strong>watch</strong></p>
<p>The <code>watch</code> argument is an interesting one. NextJS already watches the source files, so I could have omitted this one. But I use some more advanced loaders and read markdown files from the file system, which are then converted to react components and documentation pages. NextJS does not watch those markdown files that I read using <code>fs</code>. So being able to trigger a restart when I change one of those, is a welcome addition.</p>
<p>If you&#x27;d like to use pm2&#x27;s file watching feature, simply provide an array with folder paths. In my case, both <code>data</code>, as well as <code>docs</code>, are folders located at the root of my project. You could also target them down using more specific paths like <code>data/sub/folders</code>.</p>
<p>When you need more specific watch options, there is a <code>watch_options</code> property as well. For the specifics about that, you might want to check the <a href="https://github.com/paulmillr/chokidar">chokidar</a> docs.</p>
<p><strong>env</strong></p>
<p>The last one, <code>env</code>, is something we&#x27;re all familiar with. I just set <code>NODE_ENV</code> to <code>development</code>. But depending on your config you might want to add additional settings there. Think <code>MAIL_URL</code>, <code>DB_HOST</code>, or things like that. I don&#x27;t do that, because I load that kind of settings with <a href="npmjs.com/dotenv"><code>dotenv</code></a>. In this config file, you want to add those env vars, that you used to have defined in your package.json scripts.</p>
<h2>Adding the second app</h2>
<p>The profit of PM2 does not lie in the configuration of a single app. The profit comes when we&#x27;re adding the second or even third app. Rake.red stores its data in MongoDB. So let&#x27;s add that one ass well.</p>
<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">apps</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> … <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#x27;Mongo&#x27;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token string">&#x27;mongod --dbpath ../.db&#x27;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">ignore_watch</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#x27;.&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">&#x27;development&#x27;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>That should look familiar now, except for the <code>ignore_watch</code> property. With the NextJS app as defined above, I wanted to restart when files in two specific folders changed. But I don&#x27;t want to restart something like a database, like ever. Hence the <code>ignore_watch</code>. The <code>.</code> tells pm2 to simply ignore all file changes for this application. In other words, no matter what file in my project changes, pm2 will not restart MongoDB.</p>
<p>A database should start with the project, and stop at the end of the day. Restarting in between file changes doesn&#x27;t make sense.</p>
<h2>Reuse NPM Scripts</h2>
<p>As I mentioned above, it&#x27;s also possible to reuse those npm scripts that you have already defined in <code>package.json</code>. I&#x27;m not a fan of it, but that shouldn&#x27;t stop you from using it! It might ease the migration for your coworkers or contributors. Here is an example that you can copy/paste and adjust:</p>
<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">apps</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> … <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#x27;PostCSS&#x27;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token string">&#x27;npm run css:watch&#x27;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">ignore_watch</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#x27;.&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">&#x27;development&#x27;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<h2>Run it</h2>
<p>Lastly, add a start script to your package.json:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pm2-dev pm2.config.js&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And start your whole environment at once, with:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> run dev
</code></pre>
<h2>Final word</h2>
<p>Instead of needing to invoke multiple commands to get your development environment up and running, you now have a single command. This eases your own daily startup, and also makes it easier for contributors or new members on the team to get started with the project.</p>
<p>There are other solutions to get something similar to this. For example Docker, or Make files. Make files are difficult to use cross-platform. And Docker requires additional software to be installed and images to be downloaded.</p>
<p>The benefit of PM2 is, that it gets installed with <code>npm</code>, together with all your other dependencies. With <code>pm2-dev</code>, it only runs while your project is running (no daemon), while Docker keeps running as a background service. PM2 has a lower learning curve and is a bit friendlier for low-end machines regarding system resources. No virtual machines, just a process manager.</p>
<hr/>
<p><em>:wave: I&#x27;m Stephan, and I&#x27;m building <a href="http://rake.red">rake.red</a>. If you wish to read more of mine, follow me on <a href="https://twitter.com/meijer_s">Twitter</a>.</em></p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[How to handle forms in React, the alternative approach]]></title>
            <link>http://localhost:3000/articles/simple-form-handling-in-react</link>
            <guid>http://localhost:3000/articles/simple-form-handling-in-react</guid>
            <pubDate>Mon, 04 Jan 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Form handling in React, without react controlling everything!]]></description>
            <content:encoded><![CDATA[<p>When I first started with React, I was relearning how to manage forms again. <code>Controlled</code>, or <code>uncontrolled</code>. Use <code>defaultValue</code> instead of <code>value</code>, bind <code>onChange</code> handlers, and manage the state in <code>redux</code>, or more recently; should I manage the state with <code>useState</code> or <code>useReducer</code>?</p>
<p>What if I told you that this can be done much simpler? Don&#x27;t make the same rookie mistake as I did 5 years ago. Using React doesn&#x27;t mean that React needs to control everything! Use the HTML and javascript fundamentals.</p>
<p>Let&#x27;s take the example from <a href="https://www.w3schools.com/react/react_forms.asp"><code>w3schools</code></a> for submitting and validating multi-field forms. I&#x27;ve converted the class component to a functional one, as I find it easier to read.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyForm</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#x27;&#x27;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token keyword null nil">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token method function property-access">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
    <span class="token keyword">const</span> age <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">;</span>
      
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#x27;Your age must be a number&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;submitting&#x27;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token spread operator">...</span>state<span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hi!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Enter your name:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
          
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Enter your age:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
          
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>That&#x27;s a whole lot of code for handling a form. What you&#x27;re seeing here, is that on every keypress (change) in the input&#x27;s, the state is updated. When the form is submitted, this state is being read, validated, and printed to the console.</p>
<p>Now, let&#x27;s slim this down by removing all state management and change handlers.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyForm</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hi!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Enter your name:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
          
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Enter your age:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
          
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>That&#x27;s the HTML (JSX) that needs to be returned to render the form. Note, this doesn&#x27;t do anything besides rendering HTML. It does not validate, it does not handle submissions. We&#x27;ll add that back.</p>
<p>But first, forget about react, and try to remember how this would work without frameworks. How can we read the values of this form using javascript? When we have a reference to a form, with for example <code>document.getElementById(&#x27;form&#x27;)</code>, we can use <code>FormData</code> to read the form values.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementByID</span><span class="token punctuation">(</span><span class="token string">&#x27;form&#x27;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Now, <code>data</code> is of type <code>FormData</code>, when you&#x27;d need an object that you can serialize, you&#x27;d need to convert it to a plain object first. We use <code>Object.fromEntries</code> to do so.</p>
<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">fromEntries</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Next, we&#x27;ll put that back together and create an <code>onSubmit</code> handler. Please remember, when a form is submitted, the form element is available under the <code>event.currentTarget</code> property.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token method function property-access">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">currentTarget</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">fromEntries</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#x27;&#x27;, age: &#x27;&#x27; }</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>That&#x27;s still pure javascript, without any framework or library magic. Validation can be added at the place that fits you best. It&#x27;s possible to either use the form data directly or use the plain object.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// get values using FormData</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">&#x27;age&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// get values using plain object</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">;</span>
</code></pre>
<p>When we glue all those pieces together, we&#x27;ll have our final working react form:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyForm</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token method function property-access">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">currentTarget</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">fromEntries</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#x27;Your age must be a number&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;submitting&#x27;</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hi!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Enter your name:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Enter your age:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>How does that look? No more state, no more change handlers, just handing the form submit event, and working with plain HTML/javascript methods. No react specifics and no use of any library other than native methods.</p>
<h2>Bonus, create your own helper method</h2>
<p>Now when you&#x27;re dealing with a lot of forms, you might want to extract a part of this to a helper and reduce the number of duplicate lines across your code.</p>
<p>It&#x27;s trivial to extract the value extraction part to a separate function:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getFormValues</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">currentTarget</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">fromEntries</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyForm</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>   
    event<span class="token punctuation">.</span><span class="token method function property-access">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token function">getFormValues</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;submitting&#x27;</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#x27;&#x27;, age: &#x27;&#x27; }</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>
</code></pre>
<p>That still results in the need to repeat those <code>preventDefault</code> and <code>getFormValues</code> calls tho. Every handler will now need start with:</p>
<pre class="language-js"><code class="language-js">event<span class="token punctuation">.</span><span class="token method function property-access">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token function">getFormValues</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>That, we can also resolve by creating a callback style wrapper. And you know what? Let&#x27;s give it a fancy hook-like name. The function isn&#x27;t that special at all. It doesn&#x27;t do anything related to hooks, but it looks awesome! And we like awesome things, don&#x27;t we?</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useSubmit</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token method function property-access">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token function">getFormValues</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword control-flow">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And with that &quot;hook&quot;, handling forms becomes as trivial as:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyForm</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token function">useSubmit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>        
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;submitting&#x27;</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hi!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Enter your name:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Enter your age:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Feel free to use that function in non-react code. It&#x27;s framework agnostics and works with plain HTML and javascript.</p>
<p>Truth be told, I would not call it <code>useSubmit</code> in my production code. Instead, go with something more generic like <code>onSubmit</code>, <code>handleSubmit</code>, or even <code>submit</code>. It&#x27;s not a hook, and making it look like one, can result in confusion.</p>
<hr/>
<p><em>:wave: I&#x27;m Stephan, and I&#x27;m building <a href="http://updrafts.app">updrafts.app</a>. If you wish to read more of my unpopular opinions, follow me on <a href="https://twitter.com/meijer_s">Twitter</a>.</em></p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Don't skip elements with array destructuring]]></title>
            <link>http://localhost:3000/articles/dont-skip-elements-with-array-destructuring</link>
            <guid>http://localhost:3000/articles/dont-skip-elements-with-array-destructuring</guid>
            <pubDate>Tue, 22 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Prefer [].slice(2) over [,,rest]]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><em>&quot;Did you know that you can use an empty &#x27;placeholder&#x27; comma, to skip elements when destructuring arrays?&quot;</em></p>
</blockquote>
<p>That was the &quot;<a href="https://twitter.com/SimonHoiberg/status/1341371004459884544?s=20"><em>Javascript Tip tweet</em></a>&quot; by <a href="https://twitter.com/SimonHoiberg">Simon Høiberg</a> that was shown on my timeline earlier today. The tweet includes an image showing the following example code:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#x27;ravinwashere&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;FrancescoCiull4&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;jackdomleo7&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;dmokafa&#x27;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token spread operator">...</span>restUsers<span class="token punctuation">]</span> <span class="token operator">=</span> users<span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>restUsers<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Did you read the code? Nice! So please try to answer the following question without looking back: &quot;<em>How many users were skipped</em>?&quot; How hard did you find it to figure that out?</p>
<p>What if I told you that there was a better way to skip elements? One that doesn&#x27;t depend on how many commas were typed. One that has been around for ages, and that shows you the number of elements to skip, with a clear and hard to miss integer.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> remainingUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>So, how was that?</p>
<p>That should only be hard when you&#x27;re not familiar with the method. The <code>slice</code> method accepts two arguments, <code>start: number</code>, and an optional <code>end: number</code>. When the start argument is a positive number, it skips <code>n</code> elements. Start can also be negative so that it starts slicing from the end of the array. The end number is optional and tells slice what the end index is. This is nice, because <code>[, , ...restUsers, lastUser]</code> is not possible.</p>
<p>Another method that can be used, is <code>splice</code>. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Slice</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">splice</a> look a lot alike, but they are not the same! Where <code>slice</code> won&#x27;t change the source array, <code>splice</code> does.  Slice can be used to create a new subset of the source array by removing elements from the start and/or end. Splice can be used to mutate the source array by removing and adding elements.</p>
<p>So just to fix that one code snippet by Simon, if you need to skip a few, please use <code>slice</code>.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#x27;ravinwashere&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;FrancescoCiull4&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;jackdomleo7&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;dmokafa&#x27;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> remainingUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#x27;jackdomleo7&#x27;, &#x27;dmokafa&#x27;]</span>
</code></pre>
<h2>Array Destructuring</h2>
<p>Now what about destructuring? It&#x27;s definitely useful! It&#x27;s just that using it to skip elements like that example, is confusing! How many commas did we type again?</p>
<p>When it&#x27;s not confusing, is when you need to separate the first 2 or 3 from the others. Imagine that you want to render something like <code>this tweet was liked by stephan, amelia, and 3 others</code>. Oh, and just because it&#x27;s a rest element, doesn&#x27;t mean that you need to name the variable <code>rest</code>. Please keep using descriptive names.</p>
<p>In other words, something like this:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#x27;ravinwashere&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;FrancescoCiull4&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;jackdomleo7&#x27;</span><span class="token punctuation">,</span>
  <span class="token string">&#x27;dmokafa&#x27;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token spread operator">...</span>others<span class="token punctuation">]</span> <span class="token operator">=</span> users<span class="token punctuation">;</span>

<span class="token keyword">const</span> caption <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">liked by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>others<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> others</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> 
</code></pre>
<p>I&#x27;m not going into the details about slice or splice here. I&#x27;m just trying to give a bit of color and context to a bite-sized tweet. If you&#x27;re interested in reading more about those methods, please let me know in the comments, and I&#x27;m happy to dedicate an article to those methods.</p>
<p>For now, check MDN if you want to read more about <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">slice</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">splice</a>.</p>
<h2>Exceptions</h2>
<p>One more thing. As always; there are exceptions where we don&#x27;t have many other options than using destructuring to skip elements. Those exceptions are fine. For example, a custom react hook where you don&#x27;t need the first returned value:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useCustomState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>When you come across a requirement like that, please consider adding an unused variable instead. Most linters are configured in such a way, that it won&#x27;t report them if they are the leading part of an array, or otherwise ignore them when they are prefixed with an <code>_</code>.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>_state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useCustomState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Please decide the best way to approach things, on a case-by-case basis.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[How to implement a generic `ValueOf<T>` helper type in TypeScript.]]></title>
            <link>http://localhost:3000/articles/a-typescript-valueof-implementation-and-how-its-built</link>
            <guid>http://localhost:3000/articles/a-typescript-valueof-implementation-and-how-its-built</guid>
            <pubDate>Fri, 18 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[A typescript `valueof` implementation similar to `keyof`]]></description>
            <content:encoded><![CDATA[<p><a href="https://twitter.com/__tsuki__42">Sudhanshu</a> asked this interesting typescript question yesterday on the <a href="https://kcd.im/discord">KCD Discord</a>. The question was:</p>
<blockquote>
<p><em>Is it possible to restrict the type of a variable, to the values of a plain object.</em></p>
</blockquote>
<p>I was able to provide the solution, but then he wanted to know how it worked. This article is my attempt to share this bit of knowledge with you.</p>
<p>Let&#x27;s start with the plain JavaScript version. A runtime check that does the validation that Sudhanshu required.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">SHAPES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">SQUARE</span><span class="token operator">:</span> <span class="token string">&#x27;square&#x27;</span><span class="token punctuation">,</span>
  <span class="token constant">CIRCLE</span><span class="token operator">:</span> <span class="token string">&#x27;circle&#x27;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">&#x27;square&#x27;</span><span class="token punctuation">;</span>

<span class="token comment">// validate if `value` matches one of the `SHAPES` values</span>
<span class="token keyword">const</span> validValues <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token constant">SHAPES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isValid <span class="token operator">=</span> validValues<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#x27;value&#x27; should be one of: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>validValues<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">&#x27; | &#x27;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>That will throw whenever <code>value</code> does not equal either <code>square</code> or <code>circle</code>. Runtime checking is nice. But the question was if this could be statically done by typescript. Luckily for us, it sure can.</p>
<h2>Restricting to values of object</h2>
<p>The first challenge we&#x27;re up against is working with an <code>object</code> instead of a <code>type</code>. So before we can do anything, we need to extract a type out of that object. For that, we use <code>typeof</code>.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token constant">SHAPES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">SQUARE</span><span class="token operator">:</span> <span class="token string">&#x27;square&#x27;</span><span class="token punctuation">,</span>
  <span class="token constant">CIRCLE</span><span class="token operator">:</span> <span class="token string">&#x27;circle&#x27;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Shape</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token constant">SHAPES</span><span class="token punctuation">;</span>
</code></pre>
<p><code>Shape</code> now equals:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Shape</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token constant">SQUARE</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token constant">CIRCLE</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>That&#x27;s not what we want though. If we need to verify that <code>value</code> is contained in the values of the object (<code>square | circle</code>), we need those. We can do that by declaring the object as a <code>const</code>. With this, we promise Typescript that we won&#x27;t be mutating that object at run-time, and Typescript will start seeing it as an &quot;enum like&quot; object.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token constant">SHAPES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">SQUARE</span><span class="token operator">:</span> <span class="token string">&#x27;square&#x27;</span><span class="token punctuation">,</span>
  <span class="token constant">CIRCLE</span><span class="token operator">:</span> <span class="token string">&#x27;circle&#x27;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword module">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
</code></pre>
<p>With that, <code>Shape</code> becomes:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Shape</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token keyword">readonly</span> <span class="token constant">SQUARE</span><span class="token operator">:</span> <span class="token string">&#x27;square&#x27;</span><span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> <span class="token constant">CIRCLE</span><span class="token operator">:</span> <span class="token string">&#x27;circle&#x27;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre>
<p>So two things happened there. First, the properties are marked as <code>readonly</code>. We are no longer able to reassign the values, without getting errors from typescript. And second, instead of type <code>string</code>, the properties are now restricted to their corresponding &quot;enum&quot; value.</p>
<p>And with that, we have a type that we can work with. Typescript does not have a <code>valueof</code> helper, but it does have a <code>keyof</code>.  Let&#x27;s take a look, and speed up a bit.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">;</span>
</code></pre>
<p>That creates a union of the keys of Shape. <code>keys</code> is now the same as:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">keys</span> <span class="token operator">=</span> <span class="token string">&#x27;SQUARE&#x27;</span> <span class="token operator">|</span> <span class="token string">&#x27;CIRCLE&#x27;</span><span class="token punctuation">;</span>
</code></pre>
<p>Once we have the keys, we can get the values. You might already know that it&#x27;s possible to extract values and reuse them. For example, if you like to extract the type of <code>SQUARE</code>, you&#x27;d use:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Square</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">[</span><span class="token string">&#x27;SQUARE&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// square</span>
</code></pre>
<p>Now, if you would create a new union based on that type, people tend to go with something like:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">ValidShapes</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">[</span><span class="token string">&#x27;SQUARE&#x27;</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">[</span><span class="token string">&#x27;CIRCLE&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// square | circle</span>
</code></pre>
<p>Less people know or use the shorter variant:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">ValidShapes</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">[</span><span class="token string">&#x27;SQUARE&#x27;</span> <span class="token operator">|</span> <span class="token string">&#x27;CIRCLE&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// square | circle</span>
</code></pre>
<p>Let&#x27;s summarize. We used <code>keyof</code> to get a union type that reflects the keys of <code>Shape</code>. And I told you about a more compact way to create a union type from the values. Now, when you see that last snippet. You&#x27;d see that the index argument, is just another union. Meaning, we might just as well directly in-line <code>keyof</code> there.</p>
<p>All put together, that brings us to:</p>
<pre class="language-ts"><code class="language-ts"><span class="token comment">// declare object as a const, so ts recognizes it as enum</span>
<span class="token keyword">const</span> <span class="token constant">SHAPES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">SQUARE</span><span class="token operator">:</span> <span class="token string">&#x27;square&#x27;</span><span class="token punctuation">,</span>
  <span class="token constant">CIRCLE</span><span class="token operator">:</span> <span class="token string">&#x27;circle&#x27;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword module">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token comment">// create a type out of the object</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Shape</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token constant">SHAPES</span><span class="token punctuation">;</span>

<span class="token comment">// create a union from the objects keys (SQUARE | CIRCLE)</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Shapes</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">;</span>

<span class="token comment">// create a union from the objects values (square | circle)</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Values</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">[</span><span class="token maybe-class-name">Shapes</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

</code></pre>
<p>And that we can use to type the properties:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> shape<span class="token operator">:</span> <span class="token maybe-class-name">Values</span> <span class="token operator">=</span> <span class="token string">&#x27;circle&#x27;</span><span class="token punctuation">;</span>
</code></pre>
<p>Typescript will report errors there when we try to assign anything different than <code>square</code> or <code>circle</code>. So we&#x27;re done for today. The runtime check is no longer needed, as we won&#x27;t be able to compile when we assign an unsupported value.</p>
<h2>The <code>ValueOf&lt;T&gt;</code> Generic</h2>
<p>Okay. You can use the above perfectly fine. But wouldn&#x27;t it be nice if we could make this reusable? For that, typescript has something that they call a <code>generic</code>.</p>
<p>Let&#x27;s repeat our solution:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Shape</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token constant">SHAPES</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Shapes</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Values</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">[</span><span class="token maybe-class-name">Shapes</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>And let&#x27;s turn that into a generic. The first step is to make it a one-liner, but only till the type level. We are not going to in-line <code>typeof</code> at this moment. It&#x27;s certainly possible to do that, but that will add complexity that we can talk about another time.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Values</span></span> <span class="token operator">=</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>That works. And nothing has changed. The usage is still the same <code>const shape: Values = &#x27;circle&#x27;</code>. Now the generic part:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Values</span></span>     <span class="token operator">=</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token maybe-class-name">Shape</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">ValueOf</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span>    <span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>I&#x27;ve added a bit of whitespace so it&#x27;s clear what happens. First, we append the type variable <code>&lt;T&gt;</code> to the type. It&#x27;s a special kind of variable, that works on types rather than values. Next, we use that variable as the argument instead of our concrete type. Basically just replacing <code>Shape</code> with the variable <code>T</code>.</p>
<p>That&#x27;s it. <code>ValueOf</code> can be added to your typescript utility belt.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">ValueOf</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// using with a type</span>
<span class="token class-name"><span class="token keyword">const</span></span> circle<span class="token operator">:</span> <span class="token maybe-class-name">ValueOf</span><span class="token operator">&lt;</span><span class="token maybe-class-name">Shape</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#x27;circle&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rectangle<span class="token operator">:</span> <span class="token maybe-class-name">ValueOf</span><span class="token operator">&lt;</span><span class="token maybe-class-name">Shape</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#x27;rectangle&#x27;</span><span class="token punctuation">;</span> <span class="token comment">// err</span>
   
<span class="token comment">// using a plain object</span>
<span class="token keyword">const</span> circle<span class="token operator">:</span> <span class="token maybe-class-name">ValueOf</span><span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">SHAPES</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#x27;circle&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rectangle<span class="token operator">:</span> <span class="token maybe-class-name">ValueOf</span><span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">SHAPES</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&#x27;rectangle&#x27;</span><span class="token punctuation">;</span> <span class="token comment">// err</span>
</code></pre>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Don't stop Mutating]]></title>
            <link>http://localhost:3000/articles/dont-stop-mutating</link>
            <guid>http://localhost:3000/articles/dont-stop-mutating</guid>
            <pubDate>Wed, 16 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Mutating objects is fine, sometimes preferred.]]></description>
            <content:encoded><![CDATA[<p>I recently came across a <a href="https://twitter.com/SimonHoiberg/status/1338898087092346885">tweet by Simon Høiberg</a> that basically forbids you to use <code>delete</code>. The reason for this? <em>&quot;You don&#x27;t want to mutate the existing object. It leads to inconsistent and unpredictable behavior&quot;</em></p>
<p>This kind of advice turns me sad. I mean, the keyword is there. JavaScript allows us to delete properties from an object. Why not use it?</p>
<p>Don&#x27;t get me wrong. There is a truth hidden in Simon&#x27;s message. There are scenarios where you can easily avoid that keyword. And there are scenarios where mutating will cause trouble. The question is, do you really need to avoid it like the plague?</p>
<h2>Immutable or Readable</h2>
<p>The internet speaks about two primary reasons why you shouldn&#x27;t be using <code>delete</code>.</p>
<ol>
<li>Mutable, delete mutates an object which is bad. <sup><a href="https://twitter.com/SimonHoiberg/status/1338901315922128897">1</a></sup></li>
<li>Performance, delete has serious performance impact. <sup><a href="https://github.com/googleapis/google-api-nodejs-client/issues/375">2</a></sup> <sup><a href="https://webkit.org/blog/10298/inline-caching-delete/">3</a></sup></li>
</ol>
<p>Readability doesn&#x27;t seem to be very important nowadays. So let me focus on that part.</p>
<p>But first, let&#x27;s take a look at some code. I find it easier to talk that way. I&#x27;ve taken Simon&#x27;s example. We have a number of users, and want to delete the <code>age</code> property.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newUsers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> <span class="token spread operator">...</span>newUser <span class="token punctuation">}</span> <span class="token operator">=</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  newUsers<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>How was that? It&#x27;s a quite basic snippet, so I hope it was easy to understand. The above, is the version that uses object destructuring and also pushes the users without the age to a new array. Because, if we don&#x27;t want to mutate the user records, we also don&#x27;t want to mutate the list. It wouldn&#x27;t make much sense otherwise.</p>
<p>Now, please compare it to the next example, where I don&#x27;t know any better, and simply mutate the data.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">delete</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>How was that for readability? I definitely prefer the last one. It&#x27;s way easier to see what&#x27;s going on. Sure, I understand the first one perfectly fine. That&#x27;s not what this is about. The mutating variant simply adds less noise.</p>
<h2>Unpredictable behavior</h2>
<p>I can hear you think. But what about the &quot;unpredictable behavior&quot;?!. One example that I instantly can come up with where mutating can cause trouble, is in React. React uses mutations to detect when it should update the user interface (DOM). So yes, it&#x27;s important there.</p>
<p>That being said, if you fetch a large object from a rest api, and wish to do some cleaning before you save the object in a state/store. Than why could it not be a mutating action?</p>
<p>Basically, if we take the example from above, and would wrap it in a function. What trouble can it give us?</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUsersWithoutProjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">projects</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword control-flow">return</span> users<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Do you have the answer? Right.., none! Because for the outside world, <code>users</code> never had that property to start with. The data is created and mutated in the same boundary (/scope). Because <code>users</code> never left this function with the projects attached, nothing can depend on it.</p>
<h2>Performance</h2>
<p>But what about performance?!! Well, are you deleting large values or small values? A single one, or thousands? How does the rest of your code perform? If you don&#x27;t know, then don&#x27;t worry about it. You can try to optimize till the latest ms, but if the data request takes hundreds of milliseconds, would that <code>delete</code> call really make a difference?</p>
<p>I&#x27;ve created a simple <a href="https://perf.link/#eyJpZCI6IjVtcW8zbm1seDA3IiwidGl0bGUiOiJyZWNvbnN0cnVjdCB2cyBkZWxldGUiLCJiZWZvcmUiOiJmdW5jdGlvbiBmZXRjaFVzZXJzKGxlbmd0aCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aCB9KS5tYXAoKF8sIGlkKSA9PiAoeyBcbiAgICBhZ2U6IDEwLCBcbiAgICBpZDogaWRcbiAgfSkpO1xufVxuXG5jb25zdCBjb3VudCA9IDEwMDA7IiwidGVzdHMiOlt7Im5hbWUiOiJpbW11dGFibGUiLCJjb2RlIjoiY29uc3QgdXNlcnMgPSBmZXRjaFVzZXJzKGNvdW50KTtcbmNvbnN0IG5ld1VzZXJzID0gW107XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgdXNlcnMubGVuZ3RoOyBpKyspIHtcbiAgY29uc3QgeyBhZ2UsIC4uLm5ld1VzZXIgfSA9IHVzZXJzW2ldO1xuICBuZXdVc2Vycy5wdXNoKG5ld1VzZXIpO1xufSIsInJ1bnMiOls3NTAsNzUwLDc1MCw3NTAsNzUwLDc1MCw3NTAsNzUwLDc1MCw3NTAsNzUwLDkzNyw3NTAsNzUwLDEzMTIsMTI1MCwxNDM3LDEyNTAsMTMxMiwxMzEyLDEzMTIsMTM3NSwxMjUwLDEyNTAsNzUwLDExODcsMTQzNywxMjUwLDE0MzcsNzUwLDEzMTIsMTQzNywxNDM3LDEyNTAsMTE4NywxMzEyLDE0MzcsMTEyNSwxMjUwLDEyNTAsMTI1MCw3NTAsMTMxMiwxMjUwLDkzNyw5MzcsMTMxMiwxMzc1LDExMjUsMTE4NywxMTI1LDExODcsMTM3NSwxMTg3LDEzMTIsNzUwLDEyNTAsMTEyNSwxMjUwLDE0MzcsOTM3LDEyNTAsMTAwMCwxMzEyLDEyNTAsMTEyNSw3NTAsMTE4NywxMTg3LDEzMTIsMTMxMiwxMDYyLDEzMTIsMTMxMiw3NTAsMTEyNSw3NTAsMTM3NSwxMjUwLDEyNTAsMTMxMiwxMDAwLDEzNzUsMTA2MiwxMDYyLDc1MCwxMTI1LDEzNzUsMTMxMiwxMjUwLDE0MzcsMTMxMiwxMjUwLDEzMTIsMTI1MCwxMTg3LDEzNzUsMTM3NSwxMzEyLDExODddLCJvcHMiOjExNDR9LHsibmFtZSI6ImRlbGV0ZSIsImNvZGUiOiJjb25zdCB1c2VycyA9IGZldGNoVXNlcnMoY291bnQpO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IHVzZXJzLmxlbmd0aDsgaSsrKSB7XG4gIGRlbGV0ZSB1c2Vyc1tpXS5hZ2U7XG59IiwicnVucyI6WzExMjUsMTE4NywxMDYyLDExMjUsMTA2MiwxMTI1LDExODcsMTA2MiwxMTI1LDEwNjIsMTEyNSwxMzEyLDEzMTIsMTAwMCwxMzc1LDE1MDAsMTUwMCwxMzc1LDE1MDAsMTQzNywxNTAwLDEzNzUsMTM3NSwxMzc1LDEwNjIsMTM3NSwxNTAwLDE1MDAsMTQzNywxMDYyLDEzMTIsMTM3NSwxMzc1LDEzNzUsMTUwMCwxMzEyLDEzNzUsMTM3NSwxMzEyLDE1MDAsMTQzNywxMDYyLDE0MzcsMTM3NSw2MjUsMTMxMiwxMzc1LDEzNzUsMTM3NSwxMzc1LDEzNzUsMTUwMCwxMzEyLDEzNzUsMTM3NSwxMDYyLDE1MDAsMTUwMCwxNDM3LDEzNzUsMTM3NSwxNDM3LDEzMTIsMTUwMCwxMzc1LDEzMTIsMTA2MiwxNDM3LDE1MDAsMTM3NSwxNDM3LDEzMTIsMTU2MiwxNTAwLDEwNjIsMTUwMCwxMDAwLDEzMTIsMTMxMiwxMzEyLDEzMTIsMTMxMiwxMzEyLDEzMTIsMTQzNywxMDAwLDE0MzcsMTUwMCwxNTYyLDEzNzUsMTUwMCwxNDM3LDEzNzUsMTQzNywxMzc1LDEzMTIsMTQzNywxNDM3LDEzMTIsMTQzN10sIm9wcyI6MTMzMX1dLCJ1cGRhdGVkIjoiMjAyMC0xMi0xNlQxNDowOTo0NC42OTNaIn0%3D">perf.link</a> that shows you that <code>delete</code> doesn&#x27;t need to be slower than the alternative. It is one case out of thousands of potential scenarios. All I&#x27;m saying is, it&#x27;s not black and white. If you have an edge case, please do what feels best. I&#x27;m confident that there are cases where <code>delete</code> is the performance bottleneck. But I&#x27;m just as confident that 99% of us, will never work on those kinds of projects.</p>
<p>Then the other thing about performance. Not regarding <code>delete</code>, but regarding mutating. If it&#x27;s about assigning new values to properties instead of reconstructing entire objects, mutating is <a href="https://perf.link/#eyJpZCI6IjVtcW8zbm1seDA3IiwidGl0bGUiOiJpbW11dGFibGUgdnMgbXV0YWJsZSIsImJlZm9yZSI6ImZ1bmN0aW9uIGZldGNoVXNlcnMobGVuZ3RoKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHsgbGVuZ3RoIH0pLm1hcCgoXywgaWQpID0%2BICh7IFxuICAgIGFnZTogMTAsIFxuICAgIGlkOiBpZFxuICB9KSk7XG59XG5cbmNvbnN0IGNvdW50ID0gMTAwMDsiLCJ0ZXN0cyI6W3sibmFtZSI6ImltbXV0YWJsZSIsImNvZGUiOiJjb25zdCB1c2VycyA9IGZldGNoVXNlcnMoY291bnQpO1xuY29uc3QgbmV3VXNlcnMgPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCB1c2Vycy5sZW5ndGg7IGkrKykge1xuICBuZXdVc2Vycy5wdXNoKHsgLi4udXNlcnNbaV0sIGFnZTogdXNlcnNbaV0uYWdlICsgMSB9KTtcbn0iLCJydW5zIjpbMTUxOCwyMzMzLDUwMzcsNTExMSw1Mjk2LDI1OTIsNTI1OSw1MDc0LDQ3NzcsNDcwMyw0OTYyLDQ5MjUsNDkyNSw0Nzc3LDQ0NDQsNDQwNyw0NzQwLDUwMDAsNTAzNyw0NzQwLDUwNzQsNTA3NCw0MjIyLDUwMzcsNDg4OCw1MDc0LDUyOTYsNTE0OCw1MTQ4LDUxMTEsNTI5Niw1MTQ4LDUzMzMsNDgxNCw1MDAwLDUzNzAsNTE4NSw0NzQwLDUyOTYsNTE4NSw1MTExLDUxNDgsNDkyNSw1MTExLDU0NDQsNTAzNyw1Mjk2LDUxODUsMjU1NSw1MTExLDUwMDAsNTE0OCw1MTQ4LDQ2NjYsNTAwMCw1MDc0LDUxNDgsNDg4OCw1MDc0LDUwMDAsNDgxNCw1MDAwLDUwNzQsNTI5Niw1MTQ4LDUxODUsMjU5Miw1MDc0LDUwMzcsNTExMSwyMjU5LDQ5NjIsNTE0OCw1MTExLDQ3MDMsNTAzNyw0NzAzLDUyOTYsNTMzMyw1Mjk2LDQ5NjIsNTQwNyw1MTExLDUyNTksNDk2MiwyNzc3LDUyMjIsNTI5Niw0NzQwLDU0MDcsNTI1OSw1MDM3LDUxMTEsNTAwMCw1Mjk2LDQ0ODEsNTE0OCw1MDM3LDUxMTEsNDk2Ml0sIm9wcyI6NDg1OX0seyJuYW1lIjoibXV0YWJsZSIsImNvZGUiOiJjb25zdCB1c2VycyA9IGZldGNoVXNlcnMoY291bnQpO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IHVzZXJzLmxlbmd0aDsgaSsrKSB7XG4gIHVzZXJzW2ldLmFnZSA9IHVzZXJzW2ldLmFnZSArIDE7XG59IiwicnVucyI6WzM1MTgsMzcwMyw2Nzc3LDc0MDcsNzM3MCwzNzAzLDc1MTgsNjQwNyw3Mjk2LDcxODUsNzE4NSw3MjU5LDYxNDgsNzM3MCw3MzMzLDczMzMsNjg4OCw3MDM3LDcyMjIsNjg1MSw3MDM3LDcxNDgsNzU5Miw2Nzc3LDczNzAsNjgxNCw3NzAzLDc2NjYsNzIyMiw3Mjk2LDc2MjksNzU1NSw3MDc0LDc1MTgsNzM3MCw3NDA3LDc0MDcsNzA3NCw3Mjk2LDc0MDcsNzYyOSw3MTQ4LDcyNTksNzMzMyw3NTE4LDc3NDAsNzU5Miw3NjI5LDQwMDAsNzUxOCw3OTYyLDc0MDcsNzIyMiw3MjU5LDc1NTUsNzc3Nyw3NjY2LDY3NzcsNzI5Niw3MTQ4LDczNzAsNjkyNSw2OTI1LDc1OTIsNzc0MCw3MjIyLDM3NzcsNzQwNyw3Mjk2LDcyOTYsNDAzNyw3MjIyLDc1NTUsNzQ4MSw3MjIyLDczNzAsNzI1OSw2NTU1LDczNzAsNzQwNyw2OTYyLDczNzAsNzcwMyw3NDgxLDc1MTgsMzc3Nyw3MTQ4LDc0ODEsNzcwMyw3NzQwLDc2NjYsNzc0MCw3MjU5LDc2NjYsNzUxOCw2NjY2LDc1MTgsNzI1OSw1ODg4LDcxNDhdLCJvcHMiOjcwNTV9XSwidXBkYXRlZCI6IjIwMjAtMTItMTZUMTQ6MDk6MjcuMTE3WiJ9">seriously</a> faster. Again, in most cases, reconstructing objects and working in an immutable way performs fine. You won&#x27;t experience any slowness because of it. But in those other cases, mutating data is okay. Maybe even preferable.</p>
<h2>Conclusion</h2>
<p>I hope you liked this article. Because I&#x27;m not going to tell you if you should mutate your objects or not. Both mutable as well as immutable solutions have their time and place. Use them accordingly, and do what feels best. In most cases, go with what&#x27;s easiest to read.</p>
<p>This article is another attempt of me to stop the &quot;<em>DON&#x27;T DO THIS</em>&quot; shouting on the internet. Programming isn&#x27;t black and white. We can&#x27;t just ban half the keywords or native functions because they &quot;feel wrong&quot;. There is a valid use case for each and every function.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Stop mutating in map, reduce and forEach]]></title>
            <link>http://localhost:3000/articles/stop-mutating-in-map-reduce-and-foreach</link>
            <guid>http://localhost:3000/articles/stop-mutating-in-map-reduce-and-foreach</guid>
            <pubDate>Mon, 14 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Functional methods and side effects don't play well together.]]></description>
            <content:encoded><![CDATA[<p>There are plenty of articles that will try to convince you that you should use the <code>map</code>, <code>filter</code> and <code>reduce</code> methods. Less of them mention <code>forEach</code>, and not many of them mention the more traditional for loops as serious alternative. Or when to use <code>map</code> over <code>reduce</code> or especially <code>forEach</code>.</p>
<p>Programming is mostly about opinions and (maybe a bit too much) about something that we like to call &quot;common sense&quot;. In this article, I&#x27;m sharing my opinion, and write about the functions and the problem of side effects (mutating). Triggered by <a href="https://twitter.com/erikras/status/1338415676709605376?s=20">this tweet of Erik Rasmussen</a> today, and experience from the past.</p>
<p>I still remember this change I requested during a code review. It grew among the team, and was even discussed during the next retrospective. PR #1069, July 18, 2019, author <em>unimportant</em>.</p>
<pre class="language-js"><code class="language-js">path<span class="token operator">?.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">id</span> <span class="token arrow operator">=&gt;</span> <span class="token function">checkID</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eslint-disable-line no-unused-expressions</span>
</code></pre>
<p>My request was to change it to:</p>
<pre class="language-js"><code class="language-js">path<span class="token operator">?.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">id</span> <span class="token arrow operator">=&gt;</span> <span class="token function">checkID</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>A little background, <code>path</code> is a <code>string[]</code>, and <code>checkID</code> does some validations on that string to see if it&#x27;s a id-like value. If not, it will throw an error.</p>
<p>Why my change request, and why mention it in the retro? There is no law against calling methods in the map function, or throwing from within it. It was just that it doesn&#x27;t match with my expectations. And I still believe I&#x27;m in my rights there.</p>
<h2>Map</h2>
<p>My expectations for <code>map</code> is that it &quot;maps&quot; one value to another. Like so:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token arrow operator">=&gt;</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>There is an input value (<code>[1, 2, 3]</code>), map does something with it, and returns an entirely new value. <code>input !== output</code> and my expectation is that whenever an array value changed, it doesn&#x27;t match the previous value either. In other words I expect that at least for one element <code>input[n] !== output[n]</code>.</p>
<p>We&#x27;re also able to extract the callback function so that we end up with a pure, testable function. My expectation from a <code>map</code> call, is always that it is side effect free. No exceptions.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3>Expectations</h3>
<p>Now let&#x27;s take that example from Erik</p>
<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">return</span> items<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span> 
  item<span class="token punctuation">.</span><span class="token property-access">userId</span> <span class="token operator">=</span> userId<span class="token punctuation">;</span> 
  <span class="token keyword control-flow">return</span> item<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>And build some code around this, so it get&#x27;s a bit easier to work with.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addUserId</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span> 
    item<span class="token punctuation">.</span><span class="token property-access">userId</span> <span class="token operator">=</span> userId<span class="token punctuation">;</span> 
    <span class="token keyword control-flow">return</span> item<span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newItems <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token function">addUserId</span><span class="token punctuation">(</span><span class="token string">&#x27;abc&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>How do you now feel about mutating the item objects inside that <code>map</code>? When you look at the small snippet from Erik, you might be ok with it. But after extracting that callback function, I hope it starts to feel wrong. If you don&#x27;t see the problem I&#x27;m trying to highlight, try answer the following questions:</p>
<ul>
<li>what does <code>items[0]</code> look like?</li>
<li>what does <code>newItems[0]</code> look like?</li>
<li>what does <code>items === newItems</code> return?</li>
<li>what does <code>items[0] === newItems[0]</code> return?</li>
<li>do these answers match your expectations?</li>
</ul>
<h2>forEach</h2>
<p>Now let&#x27;s simply change that map call to a <code>forEach</code>.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

items<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token function">addUserId</span><span class="token punctuation">(</span><span class="token string">&#x27;#abc&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>What does this do with your expectations? Did it change anything?</p>
<p>Whenever I see a <code>forEach</code>, I expect side effects. Something is being done for (or to) each value in the array. The fact that forEach doesn&#x27;t have a return value, strengthens this feeling.</p>
<p>And this is entirely personal, but I stopped using the functional forEach calls to mutate the objects as well. I&#x27;m still okay with a <code>forEach(sideEffect)</code> but I won&#x27;t use it to mutate values. I&#x27;m using the <code>for of</code> loops for that, as I find it easier to recognize them as causing mutations.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  item<span class="token punctuation">.</span><span class="token property-access">userId</span> <span class="token operator">=</span> userId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword control-flow">return</span> items<span class="token punctuation">;</span>
</code></pre>
<p>Please compare that to the original, and feel free to share your thoughts in the comments:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newItems <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  item<span class="token punctuation">.</span><span class="token property-access">userId</span> <span class="token operator">=</span> userId<span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword control-flow">return</span> newItems<span class="token punctuation">;</span>
</code></pre>
<h2>Reduce</h2>
<p>Some would say that <code>reduce</code> is meant for mutating values. In my opinion, they&#x27;re wrong. Reduce is meant for when the shape of the container changes. Think conversions between objects and arrays, or even collections to primitives. Or a change of length of the array. Reduce is more about changing the shape of the entire collection, then it&#x27;s about changing the shape of individual entries. For that, we have <code>map</code>.</p>
<p>I&#x27;ve changed this section a bit, so let me quote <a href="https://dev.to/sebalr/comment/197ba">Sebastian Larrieu</a> from the comments below:</p>
<blockquote>
<p><em>reduce is about transforming a collection into a single value, that&#x27;s why its param is called accumulator.</em></p>
</blockquote>
<p>Sebastian summarizes the purpose of reduce quite well. Think about computing the sum from an array of numbers. An array of numbers go in, and a single number comes out.</p>
<pre class="language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> sum <span class="token operator">+</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>But the return value doesn&#x27;t always have to be a primitive. Grouping for example, is another very valid use case for reduce:</p>
<pre class="language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">groups<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> group <span class="token operator">=</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&#x27;odd&#x27;</span> <span class="token operator">:</span> <span class="token string">&#x27;even&#x27;</span><span class="token punctuation">;</span>
  groups<span class="token punctuation">[</span>group<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> groups<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">even</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">odd</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Until very recently (2 days ago basically), I saw one more purpose for reduce. I used it as alternative for a <code>filter » map</code> call, because <code>reduce</code> can do the same thing, in a single iteration. Think:</p>
<pre class="language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
  <span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token arrow operator">=&gt;</span> value <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token arrow operator">=&gt;</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Or</p>
<pre class="language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">values<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> values<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  values<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword control-flow">return</span> values<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The difference here is that <code>reduce</code> only walks the array a single time, whereas the <code>filter</code> and <code>map</code> combo walks the array two times. For 5 entries, this isn&#x27;t a big deal. For larger lists, <del>it might</del> it&#x27;s no big deal either. <em>(I thought it was, but <a href="https://dev.to/aprillion/comment/196j9">I was wrong</a>.)</em>.</p>
<p>The <code>filter().map()</code> is easier to read. I made my code harder to read, for no gain at all. And with that, we are back to the &quot;common sense&quot; issue. Programming isn&#x27;t all black and white. We can&#x27;t document, spec, or lint every single rule or choice that we have to make. Use what feels best and take your time to consider the alternatives.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[Work From Home; The Struggle of 2020]]></title>
            <link>http://localhost:3000/articles/work-from-home-the-struggle-of-2020</link>
            <guid>http://localhost:3000/articles/work-from-home-the-struggle-of-2020</guid>
            <pubDate>Tue, 03 Nov 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Working from Home isn't the same anymore.]]></description>
            <content:encoded><![CDATA[<p>Over the past few weeks, I&#x27;ve seen numerous people reaching out for mental support. Sometimes directly, often hidden under a question asking about how to maintain work/life balance when working from home with young children.</p>
<p>I&#x27;ve been working home for over 6 years now. Although, I used to work from the office for 1 or 2 days a week. So, I did meet my coworkers on regular basis.</p>
<p>But 2020 changed things. I&#x27;ve been stuck at home since March. I have a 3-year-old and a 7-month-old that has been born in the mid of this epidemic. And it&#x27;s exhausting! Not the little one. Just..., all of it.</p>
<p>At the beginning of the pandemic, I felt a huge productivity boost. Even though it was only 2 days, the time I stopped spending on commuting was now spent on something productive.</p>
<p>As we can&#x27;t spend the weekends as we would before I now spend it on side projects. Sure, we still have some family time. But I&#x27;m not the kind of person that sits still on the couch. And I&#x27;m not the kind that can get lost in books either. So, while the others are waking up, I take my notebook and code. Coding used to place me in a zone where everyday problems don&#x27;t exist.</p>
<p>This worked great in the first half of this year. I&#x27;ve given <a href="https://github.com/smeijer/leaflet-geosearch">leaflet-geosearch</a> a long due update, published some new libraries like <a href="https://github.com/smeijer/where-broke">where-broke</a>, <a href="https://github.com/smeijer/jest-partial">jest-partial</a>, <a href="https://github.com/smeijer/unimported">unimported</a>, and <a href="https://github.com/smeijer/graphql-args">graphql-args</a>. I&#x27;ve also launched few bigger projects, such as <a href="https://testing-playground.com">testing-playground.com</a>, <a href="https://issupported.com">issupported.com</a> and <a href="https://updrafts.app">updrafts.app</a>. All besides my day job. As I already mentioned, I got quite productive.</p>
<p>But things changed. Months passed by and the situation outside went from bad to worse. Covid isn&#x27;t gone. World leaders don&#x27;t agree with science. A vaccine isn&#x27;t near. There is no expectation for improvement, or even a known date when the applied regulations will end. This &quot;second wave&quot; has hit me hard.</p>
<p>My productivity has slumped. I&#x27;ve been unable to do anything productive lately. I can&#x27;t get in my code. I see my editor. I see the letters on my screen. But my mind is unable to connect the dots and draw the bigger picture.</p>
<p>The thing I&#x27;m trying to say is; if you hate working from home. Feeling unproductive. Don&#x27;t know how to balance work/life. Feel burned out. Please know: you&#x27;re not alone :heart:.</p>
<p>It&#x27;s not (just) working from home. It&#x27;s all of it. It&#x27;s 2020.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[The launch of Updrafts.app]]></title>
            <link>http://localhost:3000/articles/the-launch-of-updrafts-app</link>
            <guid>http://localhost:3000/articles/the-launch-of-updrafts-app</guid>
            <pubDate>Fri, 02 Oct 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[The launch of Updrafts.app - A Tailwind Studio.]]></description>
            <content:encoded><![CDATA[<p>I recently launched <a href="https://tailwind-studio.com">Tailwind-Studio</a>, which was quickly renamed to <a href="https://updrafts.app">Updrafts.app</a>. In this post, I tell you my story. How I came to the (early) launch, how I experienced the first week, and what I learned from it.</p>
<h2>3 Sept - First Teaser</h2>
<p>I <a href="https://twitter.com/meijer_s/status/1301499675976007680">tweeted a sped-up video</a>, showing what I was working on in my free time. Besides the tweet, I also mentioned it in a discord that I&#x27;m member of. I got some nice feedback and number of questions were asked. People wanted to know where they could sign up. It was all positive, and nothing out of the ordinary. 4 retweets, 18 likes, and a few messages were written on Discord.</p>
<h2>4 Sept - Second Teaser</h2>
<p>Because of the positive responses on the earlier teaser, I decided to post <a href="https://twitter.com/meijer_s/status/1301962876652081152">another video</a>, with more text, as well as a Typeform where people could submit their email to be informed about the release. Typeform has a free plan available, that enables me to collect 100 responses per month. That should be plenty!</p>
<h2>5 Sept - Early Access Signups</h2>
<p>The typeform is stuffed 🔥! People are <a href="https://twitter.com/me_ayushraj/status/1302113821004238849?s=20">tweeting that they aren&#x27;t able</a> to submit their email address. It turned out that the 100 response limit was reached while I was asleep. I quickly created a google form, and posted it in a tweet.</p>
<p>By the end of the day, I had ~650 likes, ~100 retweets, and 193 email addresses were submitted. I know, it didn&#x27;t exactly go viral. But I only had about 500 followers, and this was not what I was expecting. I&#x27;m used to tweeting into the void, and was hoping for 10 or 20 submissions on the Typeform.</p>
<p>This was the day that I knew I was on to something.</p>
<h3>Lesson Learned #1</h3>
<blockquote>
<p>Looks don&#x27;t matter. Typeform looks nice, but if you&#x27;re using the free plan, and are not on top of it, it will cost you submissions! Google Form doesn&#x27;t look as nice, but it does the job. I should have gone with them in the first place.</p>
</blockquote>
<h2>10 Sept - LAUNCH DAY! 🚀</h2>
<p>Well, early access, but still! I&#x27;ve been working hard on releasing this beta, because I didn&#x27;t want to loose the traction from my earlier preview tweet. I have no idea if this is the right thing to do, or if I instead should have tweeted more teasers to first grow that mail-list.</p>
<p>During the last few days, I had collected 269 email addresses to which I was going to send an email. I&#x27;ve read somewhere that email has a conversion rate between 5 and 15%, so I was expecting to get my first ~25 users.</p>
<p>I also send out a tweet mentioning <a href="https://twitter.com/meijer_s/status/1303971912276676608">the launch of Tailwind-Studio</a> . Again, not entirely viral. But 215 retweets, and over 1.000 likes. The video has been watched for almost 30.000 times and the tweet got 135.000 impressions! Seriously, way above my expectations.</p>
<p>About an hour before dinner, I got a DM from <a href="https://twitter.com/adamwathan">@adamwathan</a>. The guy that created Tailwind CSS. It turned out that by naming the product <a href="http://tailwind-studio.com">Tailwind-Studio</a>, I was breaking their trademark. Adam is friendly dude, and there are no hard feelings. But to stay in his words, this was &quot;<em>a bummer of a message on an otherwise exciting day</em>&quot;.</p>
<h3>Lesson Learned #2</h3>
<blockquote>
<p>If you name your product after another product, don&#x27;t hesitate to reach out to the other party to hear how they feel about that. I named my product after an open source project, and trademarks didn&#x27;t even cross my mind. By reaching out to them, I could have prevented this bitter aftertaste on launch day.</p>
</blockquote>
<h2>11 Sept - Approaching 1.000 Users</h2>
<p>To speed up the launch, and partially because it&#x27;s so hot these days, I chose to host the platform on Netlify. Besides using their lambda&#x27;s, I also used Netlify Identity as identity provider. This so that I didn&#x27;t need to worry about storing emails &amp; passwords. They have a generous free plan of 1.000 active users.</p>
<p>It turned out that I was approaching that number fast! Within 24 hours after launch, I was at 978 users. Truly mind blowing 🤯 , who would have expected that?</p>
<p>I decided to close user registrations by switching to &quot;Invite Only&quot;, so that I could remain in their free plan for the time being.</p>
<h2>12 Sept - Netlify Identity</h2>
<p>I got an email from Netlify, mentioning that &quot;Tailwind Studio has been upgraded to Identity Level 1&quot;.</p>
<p>It turns out, that by switching to &quot;Invite Only&quot;, all existing users were marked as being &quot;invited&quot;, and the free plan comes with a limit of 5 &quot;invite only&quot; users. So, I got myself an upgrade after all.</p>
<p>I opened registrations again, and started refactoring code to migrate away from Netlify Identity, as I wasn&#x27;t ready to pay $ 99 a month for user 1.001.</p>
<p>At the end, registrations have unnecessarily been closed for 24 hours, because I panicked. Closing registrations did not prevent a bill from being send, but I missed out on an approximate 750 users because of it.</p>
<p>This is based on the fact that I got 1.000 signups in the first 24 hours and 500 signups in the third 24 hours. Logically, the second 24 hours should have been good for 750 signups.</p>
<h3>Lesson Learned #3</h3>
<blockquote>
<p>When you&#x27;re using free tiers; make sure to be aware of their restrictions and conditions. Where Typeform decides to freeze the form once the limit has been reached, Netlify decides to start billing. And just because their build minutes are priced nicely (300 minutes /month, then $7 per 500), doesn&#x27;t mean that Identity is as well (1k per site /month, $99 when exceeded).</p>
</blockquote>
<h2>16 Sept - Re-branding!</h2>
<p>Within a week after launch, I moved away from Netlify Identity, and re-branded <a href="http://tailwind-studio.com">Tailwind Studio</a> to <a href="http://updrafts.app">Updrafts.app</a>. I&#x27;ve send out <a href="https://twitter.com/meijer_s/status/1306308672658776064">another tweet</a>, and by now things have cooled down. 15 retweets and 148 likes. I&#x27;ve informed Adam about the new name, and he kindly let me know that he noticed and is okay with it.</p>
<h2>17 Sept - Roundup</h2>
<p>That was the first week. <a href="https://updrafts.app">Updrafts.app</a> was visited by 5.504 unique humans, that created 8.427 page views (It&#x27;s a single page app). A total of 1.438 users signed up in the first 7 days.</p>
<h3>Lesson Learned #4</h3>
<blockquote>
<p>Tweet, communicate, tease, just spread the word! Don&#x27;t stop talking. Making noise is what get&#x27;s you the traffic. The two spikes below, are generated by my 2 launch tweets.</p>
</blockquote>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/nm3iuanop0ez4wyv2w8a.png" alt="updrafts-users"/></p>
<p>It&#x27;s a lot already, but not all of it. There were more technical challenges, and I had an email conversation going with a company that wanted to pay me to fork my repo. Food for another time.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
        <item>
            <title><![CDATA[The costs of Optional Chaining.]]></title>
            <link>http://localhost:3000/articles/the-costs-of-optional-chaining</link>
            <guid>http://localhost:3000/articles/the-costs-of-optional-chaining</guid>
            <pubDate>Wed, 31 Jul 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[The costs of Optional Chaining in performance and bundle size.]]></description>
            <content:encoded><![CDATA[<p>Now that optional chaining has reached stage 3, it&#x27;s time for a reevaluation.</p>
<p>A little more than a year ago, we decided to go ahead and start using <code>@babel/plugin-proposal-optional-chaining</code>. As usual with babel plugins, the primary reason was developer experience. &quot;It will make our lives easier&quot;.</p>
<p>And it did. It still does. I see it being used everywhere throughout our codebase.</p>
<p>In react <code>componentDidUpdate</code>:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">.</span><span class="token property-access">image</span><span class="token operator">?.</span>type <span class="token operator">!==</span> prevProps<span class="token punctuation">.</span><span class="token property-access">image</span><span class="token operator">?.</span>type <span class="token operator">||</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">.</span><span class="token property-access">image</span><span class="token operator">?.</span>orientation <span class="token operator">!==</span> prevProps<span class="token punctuation">.</span><span class="token property-access">image</span><span class="token operator">?.</span>orientation
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And in render functions:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">CommentButtons</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> user <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>can<span class="token operator">?.</span>edit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">edit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>can<span class="token operator">?.</span>delete<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">delete</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>can<span class="token operator">?.</span>reply<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">reply</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>It does look nice. It&#x27;s easy to understand what&#x27;s going on. Yet, it does come with a cost. And we, or at least I, highly underestimated this. The costs are there, both in performance and in bundle size.</p>
<h2>Performance</h2>
<p>Let&#x27;s first talk about the performance. Because that&#x27;s not what concerns me most.</p>
<p>The performance cost is there if optional chaining is being overused. Don&#x27;t guard all your properties. Only guard the unknowns. It&#x27;s safe to make assumptions of existence if you&#x27;re dealing with your own code.</p>
<p>That being said, We aren&#x27;t iterating our own render function 65 million times in a second. So even while the performance hit can be up to 45%. It can still be negligible in production environments. For those wondering, here is the <a href="https://jsperf.com/costs-of-optional-chaining"><code>jsperf</code></a>. Please don&#x27;t attach to much value to that.</p>
<p>Let&#x27;s move on.</p>
<h2>Bundle size</h2>
<p>The <code>CommentButtons</code> component posted above, for example, contains <code>244</code> bytes of written code, which is <a href="https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=GYVwdgxgLglg9mABAYTgWzQUzFAQiKKBAZwAoBvREYzAJ0QF8BKRcgKEUVsyhFqVIdOiADwATGADcAfEOGj8hBIgnEAhgCMANpjEBectToB-AHQQ1YM7phQG0m1BEB6RUTCz5nEW-WrNOvqGNLRmFlamYpg6UJj2UTGYLr4ecsI-BO4qMOraugZGoeaWZtwADloAnvblVcmZCJ7pzhIyQkxsDEA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=true&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=true&amp;targets=&amp;version=7.5.5&amp;externalPlugins=%40babel%2Fplugin-proposal-optional-chaining%407.2.0">transpiled</a> into <code>1.000</code> bytes. A factor 4 larger.</p>
<p>Because it&#x27;s our own code, we can safely assume that whenever the <code>user</code> prop is not <code>undefined</code>, it also has the <code>can</code> property. If it wouldn&#x27;t be enforceable by the backend. It would be enforceable by the frontend. A parent component, or the place where we call the API.</p>
<p>Anyway, we can reduce <a href="https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=GYVwdgxgLglg9mABAYTgWzQUzFAQiKKBAZwAoBvREYzAJ0QF8BKRcgKEUQhKi4EMkAXio16AfhF0AdBAGIAXKwYBuDojW1MUELSSk1nADwATGADcAfAc6JD-QgkSnifAEYAbTMcHlZYKV4wUAwWgVCGAPT2RGBWNjZ2BDFOMC4eXj5-UsaYnlCYITl5mJHRCHHxtmVIzm6e3r4CUpoADu4AniGtHaVJ5daRppZqTGwMQA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=true&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=true&amp;targets=&amp;version=7.5.5&amp;externalPlugins=%40babel%2Fplugin-proposal-optional-chaining%407.2.0">the transpiled byte size</a> to <code>477</code> bytes, by rewriting that component to remove the <code>optional chaining</code>. We are not even assuming the existence of <code>can</code> here, we default it to an empty object instead.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">CommentButtons</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> user <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> can <span class="token operator">=</span> user <span class="token operator">?</span> user<span class="token punctuation">.</span><span class="token property-access">can</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>can<span class="token punctuation">.</span><span class="token property-access">edit</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">edit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>can<span class="token punctuation">.</span><span class="token property-access">delete</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">delete</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>can<span class="token punctuation">.</span><span class="token property-access">reply</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">reply</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>I realize this is an extreme example. But I see code quite similar to this in the wild. We developers just love our productivity tools. And if there is a babel plugin that makes something easier, than why not use it?</p>
<p>I&#x27;m not saying to not use the optional chaining at all. I still love using it. I&#x27;m asking you to remember that it does come at a cost. For example, try to not use a fallback for the same property twice within a single method:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> canEdit <span class="token operator">=</span> user<span class="token operator">?.</span>can<span class="token operator">?.</span>edit<span class="token punctuation">;</span>
<span class="token keyword">var</span> canDelete <span class="token operator">=</span> user<span class="token operator">?.</span>can<span class="token operator">?.</span>delete<span class="token punctuation">;</span>

<span class="token comment">// transpiles to:</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> _user<span class="token punctuation">,</span> _user$can<span class="token punctuation">,</span> _user2<span class="token punctuation">,</span> _user2$can<span class="token punctuation">;</span>

<span class="token keyword">var</span> canEdit <span class="token operator">=</span>
  <span class="token punctuation">(</span>_user <span class="token operator">=</span> user<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> _user <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span>
    <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span>
    <span class="token operator">:</span> <span class="token punctuation">(</span>_user$can <span class="token operator">=</span> _user<span class="token punctuation">.</span><span class="token property-access">can</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> _user$can <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span>
      <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span>
      <span class="token operator">:</span> _user$can<span class="token punctuation">.</span><span class="token property-access">edit</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canDelete <span class="token operator">=</span>
  <span class="token punctuation">(</span>_user2 <span class="token operator">=</span> user<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> _user2 <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span>
    <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span>
    <span class="token operator">:</span> <span class="token punctuation">(</span>_user2$can <span class="token operator">=</span> _user2<span class="token punctuation">.</span><span class="token property-access">can</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> _user2$can <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span>
      <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span>
      <span class="token operator">:</span> _user2$can<span class="token punctuation">.</span><span class="token property-access">delete</span><span class="token punctuation">;</span>
</code></pre>
<p>We can easily reduce <a href="https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=G4QwTgBAxiB2CiATAlgFwgXggVwM4FMwB-AOhllPxVQG4AoUScgEXwBt9V9McDiy4pRO074aQA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=true&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=true&amp;targets=&amp;version=7.5.5&amp;externalPlugins=%40babel%2Fplugin-proposal-optional-chaining%407.2.0">that</a>, by only checking the <code>user.can</code> property <a href="https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=G4QwTgBAxiB2EF4IFcDOBTMB-AdDeAPgRAN4C-A3AFCiT4CiAJgJYAui0cO6Lr1tnWABF0AG3St0HfDkZiJ6CkA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=true&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=true&amp;targets=&amp;version=7.5.5&amp;externalPlugins=%40babel%2Fplugin-proposal-optional-chaining%407.2.0">once</a>:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> can <span class="token operator">=</span> user<span class="token operator">?.</span>can <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canEdit <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token property-access">edit</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canDelete <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token property-access">delete</span><span class="token punctuation">;</span>

<span class="token comment">// transpiles to:</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> _user<span class="token punctuation">;</span>

<span class="token keyword">var</span> can <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token punctuation">(</span>_user <span class="token operator">=</span> user<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> _user <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> _user<span class="token punctuation">.</span><span class="token property-access">can</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canEdit <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token property-access">edit</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canDelete <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token property-access">delete</span><span class="token punctuation">;</span>
</code></pre>
<p>And unless your first optional operator is nested somewhere, it might be worth it to take that <a href="https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=G4QwTgBAxiB2EF4IFcDOBTSAyLKNgDoZ4AfEiAbwF8BuAKFEmIFEATASwBdFo4D0Oneo16wAIugA26Tuh7ECrKTPQ0gA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=true&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=true&amp;targets=&amp;version=7.5.5&amp;externalPlugins=%40babel%2Fplugin-proposal-optional-chaining%407.2.0">last step</a>, and do avoid the optional operator at all:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> can <span class="token operator">=</span> user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token property-access">can</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canEdit <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token property-access">edit</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canDelete <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token property-access">delete</span><span class="token punctuation">;</span>


<span class="token comment">// transpiles to:</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> can <span class="token operator">=</span> <span class="token punctuation">(</span>user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token property-access">can</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canEdit <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token property-access">edit</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canDelete <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token property-access">delete</span><span class="token punctuation">;</span>
</code></pre>
<p>I hope this makes my point. I do realize that gzip can remove some of the overhead, as it&#x27;s quite good at compressing repeating patterns like <code>=== void 0</code> and <code>=== null</code>. But even with gzip, the costs of optional chaining are there. Please remember it, as we will be stuck to using the babel transpiler for quite some time. Even now it&#x27;s stage 3, it will not land in every browser that we need to support in a very short term.</p>
<p>I&#x27;ll still keep using optional chaining. Albeit less fanatical.</p>]]></content:encoded>
            <author>stephan@meijer.ws (Stephan Meijer)</author>
        </item>
    </channel>
</rss>